<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=utf-8">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:Arial;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:宋体;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:"\@宋体";
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:楷体;
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"\@楷体";
	panose-1:2 1 6 9 6 1 1 1 1 1;}
@font-face
	{font-family:"Bitstream Vera Sans";}
@font-face
	{font-family:永中宋体;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"\@永中宋体";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h1
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:14.2pt;
	font-size:16.0pt;
	font-family:Arial;
	font-weight:bold;}
h2
	{margin-top:12.0pt;
	margin-right:0cm;
	margin-bottom:6.0pt;
	margin-left:65.3pt;
	text-indent:-54.0pt;
	font-size:10.0pt;
	font-family:Arial;
	font-weight:bold;
	font-style:italic;}
h4
	{margin-top:14.0pt;
	margin-right:0cm;
	margin-bottom:14.5pt;
	margin-left:54.0pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-54.0pt;
	line-height:156%;
	font-size:10.5pt;
	font-family:Arial;
	font-weight:bold;}
p.MsoNormalIndent, li.MsoNormalIndent, div.MsoNormalIndent
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:10.0pt;
	font-size:10.5pt;
	font-family:"Times New Roman";}
p.MsoHeader, li.MsoHeader, div.MsoHeader
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:center;
	layout-grid-mode:char;
	border:none;
	padding:0cm;
	font-size:9.0pt;
	font-family:"Times New Roman";}
p.MsoFooter, li.MsoFooter, div.MsoFooter
	{margin:0cm;
	margin-bottom:.0001pt;
	layout-grid-mode:char;
	font-size:9.0pt;
	font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p
	{margin-right:0cm;
	margin-left:0cm;
	font-size:12.0pt;
	font-family:宋体;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{margin:0cm;
	margin-bottom:.0001pt;
	font-size:9.0pt;
	font-family:"Times New Roman";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin:0cm;
	margin-bottom:.0001pt;
	text-indent:21.0pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
span.WW8Num6z0
	{font-family:Wingdings;}
p.1, li.1, div.1
	{margin-top:5.0pt;
	margin-right:0cm;
	margin-bottom:0cm;
	margin-left:0cm;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:宋体;}
p.10, li.10, div.10
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:10.0pt;
	font-size:10.5pt;
	font-family:"Times New Roman";}
p.2, li.2, div.2
	{margin:0cm;
	margin-bottom:.0001pt;
	text-indent:10.0pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
p.3, li.3, div.3
	{margin:0cm;
	margin-bottom:.0001pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:10.0pt;
	font-size:10.5pt;
	font-family:"Times New Roman";}
span.a
	{font-family:"Bitstream Vera Sans";}
.MsoChpDefault
	{font-size:10.0pt;}
 /* Page Definitions */
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:36.0pt 36.0pt 36.0pt 36.0pt;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
ol
	{margin-bottom:0cm;}
ul
	{margin-bottom:0cm;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple style='text-justify-trim:punctuation'>

<div class=WordSection1>

<p class=MsoNormal align=center style='text-align:center'><b><span lang=AR-SA
style='font-size:14.0pt;font-family:楷体'>实验五：用户进程管理</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:14.0pt;
font-family:楷体;letter-spacing:.05pt'>1 <span lang=AR-SA>实验目</span></span></b><b><span
lang=AR-SA style='font-size:14.0pt;font-family:楷体'>的</span></b></p>

<p class=10 align=left style='margin-left:42.0pt;text-align:left;text-indent:
-21.0pt;text-autospace:none'><span style='font-size:12.0pt;font-family:Wingdings;
letter-spacing:.05pt'>l<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
lang=ZH-CN style='font-size:12.0pt;font-family:楷体;letter-spacing:.05pt'>了解第一个用户进程创建过程</span></p>

<p class=10 align=left style='margin-left:42.0pt;text-align:left;text-indent:
-21.0pt;text-autospace:none'><span style='font-size:12.0pt;font-family:Wingdings;
letter-spacing:.05pt'>l<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
lang=ZH-CN style='font-size:12.0pt;font-family:楷体;letter-spacing:.05pt'>了解系统调用框架的实现机制</span></p>

<p class=10 align=left style='margin-left:42.0pt;text-align:left;text-indent:
-21.0pt;text-autospace:none'><span style='font-size:12.0pt;font-family:Wingdings;
letter-spacing:.05pt'>l<span style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
lang=ZH-CN style='font-size:12.0pt;font-family:楷体;letter-spacing:.05pt'>了解</span><span
style='font-size:12.0pt;font-family:楷体;letter-spacing:.05pt'>ucore<span
lang=ZH-CN>如何实现系统调用</span>sys_fork/sys_exec/sys_exit/sys_wait<span lang=ZH-CN>来进行进程管理</span></span></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:14.0pt;
font-family:楷体;letter-spacing:.05pt'>2  <span lang=ZH-CN>实验内容</span></span></b></p>

<p class=MsoNormalIndent style='text-indent:24.0pt'><span lang=ZH-CN
style='font-size:12.0pt;font-family:楷体'>实验</span><span style='font-size:12.0pt;
font-family:楷体'>4<span lang=ZH-CN>完成了内核线程，但到目前为止，所有的运行都在内核态执行。实验</span>5<span
lang=ZH-CN>将创建用户进程，让用户进程在用户态执行，且在需要</span>ucore<span lang=ZH-CN>支持时，可通过系统调用来让</span>ucore<span
lang=ZH-CN>提供服务。为此需要构造出第一个用户进程，并通过系统调用</span><span style='letter-spacing:.05pt'>sys_fork/sys_exec/sys_exit/sys_wait<span
lang=ZH-CN>来支持运行不同的应用程序，完成对用户进程的执行过程的基本管理。</span></span><span lang=ZH-CN>相关原理介绍可看附录</span>B<span
lang=ZH-CN>。</span></span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
style='font-size:14.0pt'>2.1 </span></b><b><span lang=ZH-CN style='font-size:
14.0pt;font-family:楷体'>练习</span></b></p>

<p class=MsoNormal style='margin-right:34.95pt;text-align:justify;text-justify:
inter-ideograph;text-autospace:none'><b><span lang=ZH-CN style='font-family:
楷体;color:red'>练习</span></b><b><span style='color:red'>0</span></b><b><span
lang=ZH-CN style='font-family:楷体;color:red'>：填写已有实验</span></b></p>

<p class=MsoNormalIndent style='text-indent:0cm'><span lang=ZH-CN
style='font-size:12.0pt;font-family:楷体'>本实验依赖实验</span><span style='font-size:
12.0pt'>1/2/3/4</span><span lang=ZH-CN style='font-size:12.0pt;font-family:
楷体'>。请把你做的实验</span><span style='font-size:12.0pt'>1/2/3/4</span><span
lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>的代码填入本实验中代码中有</span><span
style='font-size:12.0pt'>“LAB1”/“LAB2”/“LAB3”/“LAB4”</span><span lang=ZH-CN
style='font-size:12.0pt;font-family:楷体'>的注释相应部分。注意：为了能够正确执行</span><span
style='font-size:12.0pt'>lab5</span><span lang=ZH-CN style='font-size:12.0pt;
font-family:楷体'>的测试应用程序，可能需对已完成的实验</span><span style='font-size:12.0pt'>1/2/3/4</span><span
lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>的代码进行进一步改进。</span></p>

<p class=MsoNormal style='margin-right:34.95pt;text-align:justify;text-justify:
inter-ideograph;text-autospace:none'><b><span lang=ZH-CN style='font-family:
楷体;color:red'>练习</span></b><b><span style='color:red'>1 </span></b><b><span
lang=ZH-CN style='font-family:楷体;color:red'>加载应用程序并执行（需要编码）</span></b></p>

<p class=MsoNormalIndent style='text-indent:0cm'><b><span style='font-size:
12.0pt;font-family:楷体'>do_execv</span></b><span lang=ZH-CN style='font-size:
12.0pt;font-family:楷体'>函数调用</span><span style='font-size:12.0pt;font-family:
楷体;color:red'>load_icode</span><span lang=ZH-CN style='font-size:12.0pt;
font-family:楷体'>（位于</span><span style='font-size:12.0pt;font-family:楷体'>kern/process/proc.c<span
lang=ZH-CN>中</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:
楷体'>）来加载并解析一个处于内存中的</span><span style='font-size:12.0pt;font-family:楷体'>ELF<span
lang=ZH-CN>执行文件格式的应用程序，建立相应的用户内存空间来放置应用程序的代码段、数据段等，且要设置好</span>proc_struct<span
lang=ZH-CN>结构中的成员变量</span>trapframe<span lang=ZH-CN>中的内容，确保在执行此进程后，能够从应用程序设定的起始执行地址开始执行。需设置正确的</span>trapframe<span
lang=ZH-CN>内容。</span></span></p>

<p class=MsoNormal style='margin-right:34.95pt;text-align:justify;text-justify:
inter-ideograph;text-autospace:none'><b><span lang=ZH-CN style='font-family:
楷体;color:red'>练习</span></b><b><span style='color:red'>2 </span></b><b><span
lang=ZH-CN style='font-family:楷体;color:red'>父进程复制自己的内存空间给子进程（需要编码）</span></b></p>

<p class=MsoBodyText style='text-align:justify;text-justify:inter-ideograph'><span
lang=ZH-CN style='font-family:楷体'>创建子进程的函数</span><span style='font-family:楷体'>do_fork<span
lang=ZH-CN>在执行中将拷贝当前进程（即父进程）的用户内存地址空间中的合法内容到新进程中（子进程），完成内存资源的复制。具体是通过</span><span
style='color:red'>copy_range</span><span lang=ZH-CN>函数</span><span lang=AR-SA>（位于</span><span>kern/mm/pmm.c<span
lang=AR-SA>中</span></span><span lang=AR-SA>）</span><span lang=ZH-CN>实现的，请补充</span>copy_range<span
lang=ZH-CN>的实现，确保能够正确执行。</span></span></p>

<p class=MsoNormal style='margin-right:34.95pt;text-align:justify;text-justify:
inter-ideograph;text-autospace:none'><b><span lang=ZH-CN style='font-family:
楷体;color:red'>练习</span></b><b><span style='color:red'>3 </span></b><b><span
lang=ZH-CN style='font-family:楷体;color:red'>阅读分析源代码，理解进程执行</span></b><b><span
style='color:red'>fork/exec/wait/exit</span></b><b><span lang=ZH-CN
style='font-family:楷体;color:red'>的实现，以及系统调用的实现（不需要编码）</span></b></p>

<p class=MsoNormal style='margin-right:9.8pt;line-height:17.9pt;text-autospace:
none'><span lang=AR-SA style='font-family:楷体'>执行：</span><span style='font-family:
楷体'>make grade <span lang=ZH-CN>。</span><span lang=AR-SA>如果</span><span
lang=ZH-CN>所显示的应用程序检测都输出</span>ok<span lang=AR-SA>，则基本正确。（<b><span
style='color:red'>使用的是</span></b></span><b><span style='color:red'>qemu-1.0.1</span></b><span
lang=AR-SA>）</span></span></p>

<p class=MsoNormal style='margin-right:34.95pt;text-align:justify;text-justify:
inter-ideograph;text-autospace:none'><b><span lang=ZH-CN style='font-family:
楷体;color:red'>扩展练习</span></b><b><span style='color:red'>Challenge</span></b><b><span
lang=ZH-CN style='font-family:楷体;color:red'>：实现</span></b><b><span
style='color:red'>Copy on Write</span></b><b><span lang=ZH-CN style='font-family:
楷体;color:red'>机制</span></b></p>

<p class=MsoNormal style='margin-right:9.8pt;text-align:justify;text-justify:
inter-ideograph;line-height:17.9pt;text-autospace:none'><span lang=AR-SA
style='font-family:楷体'>这</span><span lang=ZH-CN style='font-family:楷体'>个扩展练习涉及到</span><span
lang=AR-SA style='font-family:楷体'>本实验</span><span lang=ZH-CN style='font-family:
楷体'>和上一个实验“虚拟内存管理”。</span><span>Copy-on-write</span><span lang=ZH-CN
style='font-family:楷体'>（简称</span><span>COW</span><span lang=ZH-CN
style='font-family:楷体'>）的</span><span lang=AR-SA style='font-family:楷体'>基本概念是</span><span
lang=ZH-CN style='font-family:楷体'>指</span><span lang=AR-SA style='font-family:
楷体'>如果有多个</span><span lang=ZH-CN style='font-family:楷体'>使用</span><span
lang=AR-SA style='font-family:楷体'>者</span><span lang=ZH-CN style='font-family:
楷体'>对一个资源</span><span>A</span><span lang=ZH-CN style='font-family:楷体'>（比如内存块）</span><span
lang=AR-SA style='font-family:楷体'>进行读操作</span><span lang=ZH-CN
style='font-family:楷体'>，则每个使用者只需</span><span lang=AR-SA style='font-family:
楷体'>获得一个指向同一个资源</span><span>A</span><span lang=AR-SA style='font-family:楷体'>的指针</span><span
lang=ZH-CN style='font-family:楷体'>，就可以</span><span lang=AR-SA style='font-family:
楷体'>该资源</span><span lang=ZH-CN style='font-family:楷体'>了</span><span lang=AR-SA
style='font-family:楷体'>。</span><span lang=ZH-CN style='font-family:楷体'>若某使用</span><span
lang=AR-SA style='font-family:楷体'>者需要对</span><span lang=ZH-CN style='font-family:
楷体'>这个</span><span lang=AR-SA style='font-family:楷体'>资源</span><span>A</span><span
lang=AR-SA style='font-family:楷体'>进行写操作，</span><span lang=ZH-CN
style='font-family:楷体'>系统</span><span lang=AR-SA style='font-family:楷体'>会对该资源进行拷贝</span><span
lang=ZH-CN style='font-family:楷体'>操作</span><span lang=AR-SA style='font-family:
楷体'>，从而</span><span lang=ZH-CN style='font-family:楷体'>使得该“写操作”使用者</span><span
lang=AR-SA style='font-family:楷体'>获得一个该资源</span><span>A</span><span lang=AR-SA
style='font-family:楷体'>的</span><span>“</span><span lang=AR-SA style='font-family:
楷体'>私有</span><span>”</span><span lang=AR-SA style='font-family:楷体'>拷贝</span><span>—</span><span
lang=ZH-CN style='font-family:楷体'>资源</span><span>B</span><span lang=AR-SA
style='font-family:楷体'>，</span><span lang=ZH-CN style='font-family:楷体'>可对资源</span><span>B</span><span
lang=AR-SA style='font-family:楷体'>进行写操作。该</span><span lang=ZH-CN
style='font-family:楷体'>“写操作”使用</span><span lang=AR-SA style='font-family:楷体'>者对</span><span
lang=ZH-CN style='font-family:楷体'>资源</span><span>B</span><span lang=AR-SA
style='font-family:楷体'>的改变对于其他的</span><span lang=ZH-CN style='font-family:楷体'>使用</span><span
lang=AR-SA style='font-family:楷体'>者</span><span lang=ZH-CN style='font-family:
楷体'>而言</span><span lang=AR-SA style='font-family:楷体'>是不可见的</span><span
lang=ZH-CN style='font-family:楷体'>，因为其他使用者看到的还是资源</span><span>A</span><span
lang=AR-SA style='font-family:楷体'>。</span></p>

<p class=MsoNormal style='margin-right:9.8pt;text-align:justify;text-justify:
inter-ideograph;line-height:17.9pt;text-autospace:none'><span lang=AR-SA
style='font-family:楷体'>在</span><span>ucore</span><span lang=ZH-CN
style='font-family:楷体'>操作系统中，</span><span lang=AR-SA style='font-family:楷体'>当一个</span><span
lang=ZH-CN style='font-family:楷体'>用户父</span><span lang=AR-SA style='font-family:
楷体'>进程创建自己的</span><span lang=ZH-CN style='font-family:楷体'>子</span><span
lang=AR-SA style='font-family:楷体'>进程时，</span><span lang=ZH-CN style='font-family:
楷体'>父进程会把其申请的用户空间设置为只读，子进程可</span><span lang=AR-SA style='font-family:楷体'>共享</span><span
lang=ZH-CN style='font-family:楷体'>父进程占用的用户</span><span lang=AR-SA
style='font-family:楷体'>内存</span><span lang=ZH-CN style='font-family:楷体'>空间</span><span
lang=AR-SA style='font-family:楷体'>中的页面</span><span lang=ZH-CN style='font-family:
楷体'>（这就是一个共享的资源）</span><span lang=AR-SA style='font-family:楷体'>。当其中任何一个进程修改</span><span
lang=ZH-CN style='font-family:楷体'>此用户</span><span lang=AR-SA style='font-family:
楷体'>内存</span><span lang=ZH-CN style='font-family:楷体'>空间</span><span lang=AR-SA
style='font-family:楷体'>中的</span><span lang=ZH-CN style='font-family:楷体'>某</span><span
lang=AR-SA style='font-family:楷体'>页面时，</span><span>ucore</span><span
lang=ZH-CN style='font-family:楷体'>会通过</span><span>page fault</span><span
lang=ZH-CN style='font-family:楷体'>异常获知</span><span lang=AR-SA style='font-family:
楷体'>该操作，</span><span lang=ZH-CN style='font-family:楷体'>并完成</span><span
lang=AR-SA style='font-family:楷体'>拷贝内存页面</span><span lang=ZH-CN
style='font-family:楷体'>，使得两个进程都有各自的内存页面</span><span lang=AR-SA
style='font-family:楷体'>。这样一个进程所做的修改不会被另外一个进程可见</span><span lang=ZH-CN
style='font-family:楷体'>了</span><span lang=AR-SA style='font-family:楷体'>。</span><span
lang=ZH-CN style='font-family:楷体'>请在</span><span>ucore</span><span lang=ZH-CN
style='font-family:楷体'>中实现这样的</span><span>COW</span><span lang=ZH-CN
style='font-family:楷体'>机制。</span></p>

<p class=MsoNormal style='margin-right:9.8pt;text-align:justify;text-justify:
inter-ideograph;line-height:17.9pt;text-autospace:none'><span style='font-family:
楷体'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
style='font-size:14.0pt'>2.2 </span></b><b><span lang=ZH-CN style='font-size:
14.0pt;font-family:楷体'>项目组成</span></b></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=493 valign=top style='width:492.7pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>.</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>├── boot</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>├── kern</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'> </span><span style='font-size:9.0pt;
  font-family:楷体;color:purple'>debug</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>kdebug.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>└──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>……</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span style='font-size:9.0pt;
  font-family:楷体'> mm</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'> memlayout.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>pmm.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>pmm.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  style='font-size:9.0pt;font-family:楷体'> ......</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>vmm.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>└──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>vmm.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span style='font-size:9.0pt;
  font-family:楷体'> process</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>proc.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>proc.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>└──</span><span
  style='font-size:9.0pt;font-family:楷体'> ......</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span style='font-size:9.0pt;
  font-family:楷体'> schedule</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>sched.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>└──</span><span
  style='font-size:9.0pt;font-family:楷体'> ......</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span style='font-size:9.0pt;
  font-family:楷体'> sync</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>└──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:purple'>sync.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'> </span><span style='font-size:9.0pt;
  font-family:楷体;color:red'>syscall</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>├──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:red'>syscall.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>│</span><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'> </span><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>└──</span><span
  lang=AR-SA style='font-size:9.0pt;font-family:楷体'> </span><span
  style='font-size:9.0pt;font-family:楷体;color:red'>syscall.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>└──</span><span style='font-size:9.0pt;
  font-family:楷体'> trap</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>     </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span style='font-size:9.0pt;
  font-family:楷体'> trap.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>     </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span style='font-size:9.0pt;
  font-family:楷体'> trapentry.S</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>     </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span style='font-size:9.0pt;
  font-family:楷体'> trap.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>     </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>└──</span><span style='font-size:9.0pt;
  font-family:楷体'> vectors.S</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>├── libs</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'> </span><span style='font-size:9.0pt;
  font-family:楷体;color:purple'>elf.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'> </span><span style='font-size:9.0pt;
  font-family:楷体;color:purple'>error.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'> </span><span style='font-size:9.0pt;
  font-family:楷体;color:purple'>printfmt.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'> </span><span style='font-size:9.0pt;
  font-family:楷体;color:red'>unistd.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>└──</span><span style='font-size:9.0pt;
  font-family:楷体'> ......</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>├── tools</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>├──</span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'> </span><span style='font-size:9.0pt;
  font-family:楷体;color:red'>user.ld</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>│</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>└──</span><span style='font-size:9.0pt;
  font-family:楷体'> ......</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>└── <span
  style='color:red'>user</span></span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体;color:red'>   
  ├── hello.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体;color:red'>   
  ├── libs</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体;color:red'>   
  │</span><span style='font-size:9.0pt;font-family:宋体;color:red'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:red'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体;color:red'>├──</span><span
  style='font-size:9.0pt;font-family:楷体;color:red'> initcode.S</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体;color:red'>   
  │</span><span style='font-size:9.0pt;font-family:宋体;color:red'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:red'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体;color:red'>├──</span><span
  style='font-size:9.0pt;font-family:楷体;color:red'> syscall.c</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体;color:red'>   
  │</span><span style='font-size:9.0pt;font-family:宋体;color:red'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:red'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体;color:red'>├──</span><span
  style='font-size:9.0pt;font-family:楷体;color:red'> syscall.h</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>    │</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'> </span><span lang=AR-SA
  style='font-size:9.0pt;font-family:楷体'>└──</span><span style='font-size:9.0pt;
  font-family:楷体'> ......</span></p>
  <p class=MsoBodyText><span style='font-size:9.0pt;font-family:楷体'>    └──
  ......</span></p>
  </td>
 </tr>
</table>

<p class=MsoBodyText style='text-align:justify;text-justify:inter-ideograph'><span
style='font-family:楷体'>    </span><span lang=AR-SA style='font-family:楷体'>相对与实验四，实验五主要增加的文件如上表红色部分所示，主要修改的文件如上表紫色部分所示。主要改动如下：</span></p>

<p class=1 style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>kern/debug/ </span></p>

<p class=1 style='margin-left:35.25pt'><span style='font-family:楷体'>kdebug.c<span
lang=AR-SA>：修改：解析用户进程的符号信息表示（可不用理会）</span></span></p>

<p class=1 style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>kern/mm/   <span lang=ZH-CN>（与本次实验有较大关系）</span></span></p>

<p class=1 style='text-indent:42.0pt'><span style='font-family:楷体'>memlayout.h<span
lang=AR-SA>：</span><span lang=ZH-CN>修改：</span><span lang=AR-SA>增加了用户虚存地址空间的图形表示和宏定义</span> 
<span lang=AR-SA>（需仔细理解）。</span></span></p>

<p class=1 style='margin-left:35.25pt'><span style='font-family:楷体'>pmm.[ch]<span
lang=ZH-CN>：修改：添加了用于进程退出（</span>do_exit<span lang=ZH-CN>）的内存资源回收的</span>page_remove_pte<span
lang=ZH-CN>、</span>unmap_range<span lang=ZH-CN>、</span>exit_range<span
lang=ZH-CN>函数和用于创建子进程（</span>do_fork<span lang=ZH-CN>）中拷贝父进程内存空间的</span>copy_range<span
lang=ZH-CN>函数，修改了</span>pgdir_alloc_page<span lang=ZH-CN>函数</span></span></p>

<p class=1><span style='font-family:楷体'>       vmm.[ch]<span lang=AR-SA>：修改：扩展了</span>mm_struct<span
lang=AR-SA>数据结构，增加了一系列函数</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>mm_map/dup_mmap/exit_mmap<span
lang=AR-SA>：设定</span>/<span lang=AR-SA>取消</span>/<span lang=AR-SA>复制</span>/<span
lang=AR-SA>删除用户进程的合法内存空间</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>copy_from_user/copy_to_user<span
lang=AR-SA>：用户内存空间内容与内核内存空间内容的相互拷贝的实现</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>user_mem_check<span lang=AR-SA>：搜索</span>vma<span
lang=AR-SA>链表，检查是否是一个合法的用户空间范围</span></span></p>

<p class=1 style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>kern/process/ <span lang=ZH-CN>（与本次实验有较大关系）</span></span></p>

<p class=1><span style='font-family:楷体'>       proc.[ch]<span lang=ZH-CN>：</span><span
lang=AR-SA>修改：扩展了</span>proc_struct<span lang=AR-SA>数据结构</span><span
lang=ZH-CN>。</span><span lang=AR-SA>增加或修改了一系列函数</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>setup_pgdir/put_pgdir<span
lang=AR-SA>：创建并设置</span>/<span lang=AR-SA>释放页目录表</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>copy_mm<span lang=AR-SA>：复制用户进程的内存空间和设置相关内存管理（如页表等）信息</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>do_exit<span lang=AR-SA>：释放进程自身所占内存空间和相关内存管理（如页表等）信息所占空间，唤醒父进程，好让父进程收了自己，让调度器切换到其他进程</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>load_icode<span lang=AR-SA>：被</span>do_execve<span
lang=AR-SA>调用，完成加载放在内存中的执行程序到进程空间，这涉及到对页表等的修改，分配用户栈</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>do_execve<span lang=AR-SA>：先回收自身所占用户空间，然后调用</span>load_icode<span
lang=AR-SA>，用新的程序覆盖内存空间，形成一个执行新程序的新进程</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>do_yield<span lang=AR-SA>：让调度器执行一次选择新进程的过程</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>do_wait<span lang=AR-SA>：父进程等待子进程，并在得到子进程的退出消息后，彻底回收子进程所占的资源（比如子进程的内核栈和进程控制块）</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>do_kill<span lang=AR-SA>：给一个进程设置</span>PF_EXITING<span
lang=AR-SA>标志（</span>“kill”<span lang=AR-SA>信息，即要它死掉），这样在</span>trap<span
lang=AR-SA>函数中，将根据此标志，让进程退出</span></span></p>

<p class=1 style='margin-left:63.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>◆<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>KERNEL_EXECVE/__KERNEL_EXECVE/__KERNEL_EXECVE2<span
lang=AR-SA>：被</span>user_main<span lang=AR-SA>调用，执行一用户进程</span></span></p>

<p class=1 style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>kern/trap/  </span></p>

<p class=1 style='margin-left:42.0pt;text-indent:-42.0pt'><span
style='font-family:楷体'>       trap.c<span lang=ZH-CN>：修改：</span><span
lang=AR-SA>在</span>idt_init<span lang=AR-SA>函数中，对</span>IDT<span lang=AR-SA>初始化时，设置好了用于系统调用的中断门（</span>idt[T_SYSCALL]<span
lang=AR-SA>）信息。这主要与</span>syscall<span lang=AR-SA>的实现相关</span></span></p>

<p class=1 style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:"永中宋体","serif"'>●<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-family:楷体'>user/*</span></p>

<p class=1><span style='font-family:楷体'>     <span lang=AR-SA>新增的用户程序和用户库</span></span></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:14.0pt;
font-family:楷体;letter-spacing:.05pt'>3 <span lang=ZH-CN>用户进程管理</span></span></b></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
style='font-size:14.0pt'>3.1</span></b><b><span lang=AR-SA style='font-size:
14.0pt;font-family:楷体'>实验执行流程概述</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
24.0pt'><span lang=AR-SA style='font-family:楷体'>到</span><span lang=ZH-CN
style='font-family:楷体'>实验四</span><span lang=AR-SA style='font-family:楷体'>为止，</span><span
style='font-family:楷体'>ucore<span lang=AR-SA>还一直在核心态</span>“<span lang=AR-SA>打转</span>”<span
lang=AR-SA>，没有到用户态执行。</span><span lang=ZH-CN>提供各种操作系统功能的内核线程只能在</span>CPU<span
lang=ZH-CN>核心态运行</span><span lang=AR-SA>是操作系统</span><span lang=ZH-CN>自身</span><span
lang=AR-SA>的要求，操作系统就要呆在核心态，才能管理整个计算机系统。但应用程序员也需要编写各种应用软件，且要在计算机系统上运行。如果把这些应用软件都作为内核线程来执行，那系统的安全性就无法得到保证了。所以，</span>ucore<span
lang=AR-SA>要提供用户态进程的创建和执行机制，给应用程序执行提供一个用户态运行环境。接下来我们就</span><span lang=ZH-CN>简要分析本实验的执行过程，以及分析</span><span
lang=AR-SA>用户进程的整个生命周期来阐述用户进程管理的设计与实现。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span style='font-family:楷体'>  <span lang=ZH-CN>显然，由于进程的执行空间扩展到了用户态空间，且出现了创建子进程执行应用程序等与</span>lab4<span
lang=ZH-CN>有较大不同的地方，所以具体实现的不同主要集中在进程管理和内存管理部分。首先，我们从</span>ucore<span
lang=ZH-CN>的初始化部分来看，会发现初始化的总控函数</span>kern_init<span lang=ZH-CN>没有任何变化。但这并不意味着</span>lab4<span
lang=ZH-CN>与</span>lab5<span lang=ZH-CN>差别不大。其实</span>kern_init<span
lang=ZH-CN>调用的物理内存初始化，进程管理初始化等都有一定的变化。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
24.0pt'><span lang=ZH-CN style='font-family:楷体'>在内存管理部分，与</span><span
style='font-family:楷体'>lab4<span lang=ZH-CN>最大的区别就是增加用户态虚拟内存的管理。为了管理用户态的虚拟内存，需要对页表的内容进行扩展，能够把部分物理内存映射为用户态虚拟内存。如果某进程执行过程中，</span>CPU<span
lang=ZH-CN>在用户态下执行（在</span>CS<span lang=ZH-CN>段寄存器最低两位包含有一个</span>2<span
lang=ZH-CN>位的优先级域，如果为</span>0<span lang=ZH-CN>，表示</span>CPU<span lang=ZH-CN>运行在特权态；如果为</span>3<span
lang=ZH-CN>，表示</span>CPU<span lang=ZH-CN>运行在用户态。），则可以访问本进程页表描述的用户态虚拟内存，但由于权限不够，不能访问内核态虚拟内存。另一方面，不同的进程有各自的页表，所以即使不同进程的用户态虚拟地址相同，但由于页表把虚拟页映射到了不同的物理页帧，所以不同进程的虚拟内存空间是被隔离开的，相互之间无法直接访问。在用户态内存空间和内核态内核空间之间需要拷贝数据，让</span>CPU<span
lang=ZH-CN>处在内核态才能完成对用户空间的读或写，为此需要设计专门的拷贝函数（</span>copy_from_user<span
lang=ZH-CN>和</span>copy_to_user<span lang=ZH-CN>）完成。但反之则会导致违反</span>CPU<span
lang=ZH-CN>的权限管理，导致内存访问异常。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
24.0pt'><span lang=ZH-CN style='font-family:楷体'>在进程管理方面，主要涉及到的是进程控制块中与内存管理相关的部分，包括建立进程的页表和维护进程可访问空间（可能还没有建立虚实映射关系）的信息；加载一个</span><span
style='font-family:楷体'>ELF<span lang=ZH-CN>格式的程序到进程控制块管理的内存中的方法；在进程复制（</span>fork<span
lang=ZH-CN>）过程中，把父进程的内存空间拷贝到子进程内存空间的技术。另外一部分与用户态进程生命周期管理相关，包括让进程放弃</span>CPU<span
lang=ZH-CN>而睡眠等待某事件；让父进程等待子进程结束；一个进程杀死另一个进程；给进程发消息；建立进程的血缘关系链表。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
24.0pt'><span lang=ZH-CN style='font-family:楷体'>当实现了上述内存管理和进程管理的需求后，接下来</span><span
style='font-family:楷体'>ucore<span lang=ZH-CN>的用户进程管理工作就比较简单了。首先，“硬”构造出第一个进程（</span>lab4<span
lang=ZH-CN>中已有描述），它是后续所有进程的祖先；然后，在</span>proc_init<span lang=ZH-CN>函数中，通过</span>alloc<span
lang=ZH-CN>把当前</span>ucore<span lang=ZH-CN>的执行环境转变成</span>idle<span lang=ZH-CN>内核线程的执行现场；然后调用</span>kernl_thread<span
lang=ZH-CN>来创建第二个内核线程</span>init_main<span lang=ZH-CN>，而</span>init_main<span
lang=ZH-CN>内核线程有创建了</span>user_main<span lang=ZH-CN>内核线程</span>.<span
lang=ZH-CN>。到此，内核线程创建完毕，应该开始用户进程的创建过程，这第一步实际上是通过</span>user_main<span
lang=ZH-CN>函数调用</span>kernel_tread<span lang=ZH-CN>创建子进程，通过</span>kernel_execve<span
lang=ZH-CN>调用来把某一具体程序的执行内容放入内存。具体的放置方式是根据</span>ld<span lang=ZH-CN>在此文件上的地址分配为基本原则，把程序的不同部分放到某进程的用户空间中，从而通过此进程来完成程序描述的任务。一旦执行了这一程序对应的进程，就会从内核态切换到用户态继续执行。以此类推，</span>CPU<span
lang=ZH-CN>在用户空间执行的用户进程，其地址空间不会被其他用户的进程影响，但由于系统调用（用户进程直接获得操作系统服务的唯一通道）、外设中断和异常中断的会随时产生，从而间接推动了用户进程实现用户态到到内核态的切换工作。</span>ucore<span
lang=ZH-CN>对</span>CPU<span lang=ZH-CN>内核态与用户态的切换过程需要比较仔细地分析（这其实是实验一的扩展练习）。当进程执行结束后，需回收进程占用和没消耗完毕的设备整个过程，且为新的创建进程请求提供服务。在本实验中，当系统中存在多个进程或内核线程时，</span>
ucore<span lang=ZH-CN>采用了一种</span>FIFO<span lang=ZH-CN>的很简单的调度方法来管理每个进程占用</span>CPU<span
lang=ZH-CN>的时间和频度等。在</span>ucore<span lang=ZH-CN>运行过程中，由于调度、时间中断、系统调用等原因，使得进程会进行切换、创建、睡眠、等待、发消息等各种不同的操作，周而复始，生生不息。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
24.0pt'><span style='font-family:楷体'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
style='font-size:14.0pt'>3.2</span></b><b><span lang=ZH-CN style='font-size:
14.0pt;font-family:楷体'>创建用户进程</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
24.0pt'><span lang=AR-SA style='font-family:楷体'>在实验四中，我们已经完成了对内核线程的创建，但与用户进程的创建过程相比，创建内核线程的过程还远远不够。而这两个创建过程的差异本质上就是用户进程和内核线程的差异决定的。</span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:34.95pt;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0cm;text-autospace:none'><b><span>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=ZH-CN style='font-family:楷体'>应用程序的组成和编译</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>我们首先来看一个应用程序，这里我们假定是</span><span
style='font-family:楷体'>hello<span lang=AR-SA>应用程序，在</span>user/hello.c<span
lang=AR-SA>中实现，代码如下：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p><b><span style='font-size:9.0pt;font-family:楷体;color:green'>#include</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体;color:#CC0000'>&lt;stdio.h&gt;</span><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><b><span style='font-size:9.0pt;font-family:楷体;color:green'>#include</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体;color:#CC0000'>&lt;ulib.h&gt;</span><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  <br>
  </span><b><span style='font-size:9.0pt;font-family:楷体;color:navy'>int</span></b><span
  style='font-size:9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;font-family:楷体'>main<b>(<span
  style='color:navy'>void</span>)</b></span><span style='font-size:9.0pt;
  color:gray'>&nbsp;</span><b><span style='font-size:9.0pt;font-family:楷体'>{</span></b><span
  style='font-size:9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>cprintf<b>(</b><span style='color:
  #CC0000'>&quot;Hello</span></span><span style='font-size:9.0pt;color:#CC0000'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>world!!.\n&quot;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>);</span></b><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>cprintf<b>(</b><span style='color:
  #CC0000'>&quot;I</span></span><span style='font-size:9.0pt;color:#CC0000'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>am</span><span
  style='font-size:9.0pt;color:#CC0000'>&nbsp;</span><span style='font-size:
  9.0pt;font-family:楷体;color:#CC0000'>process</span><span style='font-size:
  9.0pt;color:#CC0000'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体;color:#CC0000'>%d.\n&quot;</span><b><span style='font-size:9.0pt;
  font-family:楷体'>,</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>getpid<b>());</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>cprintf<b>(</b><span style='color:
  #CC0000'>&quot;hello</span></span><span style='font-size:9.0pt;color:#CC0000'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>pass.\n&quot;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>);</span></b><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>return</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体;color:teal'>0</span><b><span style='font-size:9.0pt;
  font-family:楷体'>;</span></b><span style='font-size:9.0pt;font-family:楷体;
  color:gray'><br>
  </span><b><span style='font-size:9.0pt;font-family:楷体'>}</span></b></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span style='font-family:楷体'> </span><span style='font-family:楷体'>hello<span
lang=AR-SA>应用程序只是输出一些字符串，并通过系统调用</span>sys_getpid<span lang=AR-SA>（在</span>getpid<span
lang=AR-SA>函数中调用）输出代表</span>hello<span lang=AR-SA>应用程序执行的用户进程的进程标识</span>--pid<span
lang=AR-SA>。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>首先，我们需要了解</span><span
style='font-family:楷体'>ucore<span lang=AR-SA>操作系统如何能够找到</span>hello<span
lang=AR-SA>应用程序。这需要分析</span>ucore<span lang=AR-SA>和</span>hello<span
lang=AR-SA>是如何编译的。修改</span>Makefile<span lang=AR-SA>，把第六行注释掉。然后在本实验源码目录下执行</span>make<span
lang=AR-SA>，可得到如下输出：</span></span></p>

<div align=center>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>……</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>+ cc user/hello.c</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>&nbsp;</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>gcc -Iuser/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc 
  -fno-stack-protector -Ilibs/ -Iuser/include/ -Iuser/libs/ -c user/hello.c -o
  obj/user/hello.o</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>&nbsp;</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>ld -m    elf_i386 -nostdlib -T tools/user.ld -o
  obj/__user_hello.out  obj/user/libs/initcode.o obj/user/libs/panic.o
  obj/user/libs/stdio.o obj/user/libs/syscall.o obj/user/libs/ulib.o
  obj/user/libs/umain.o  obj/libs/hash.o obj/libs/printfmt.o obj/libs/rand.o
  obj/libs/string.o obj/user/hello.o</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>……</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel 
  obj/kern/init/entry.o obj/kern/init/init.o …… -b binary ……
  obj/__user_hello.out</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>……</span></p>
  </td>
 </tr>
</table>

</div>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从中可以看出，</span><span
style='font-family:楷体'>hello<span lang=AR-SA>应用程序不仅仅是</span>hello.c<span
lang=AR-SA>，还包含了支持</span>hello<span lang=AR-SA>应用程序的用户态库：</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:12.0pt;font-family:楷体'>user/libs/initcode.S<span
lang=ZH-CN>：所有应用程序的起始用户态执行地址</span>“_start”<span lang=ZH-CN>，调整了</span>EBP<span
lang=ZH-CN>和</span>ESP<span lang=ZH-CN>后，调用</span>umain<span lang=ZH-CN>函数。</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:12.0pt;font-family:楷体'>user/libs/umain.c<span
lang=ZH-CN>：实现了</span>umain<span lang=ZH-CN>函数，这是所有应用程序执行的第一个</span>C<span
lang=ZH-CN>函数，它将调用应用程序的</span>main<span lang=ZH-CN>函数，并在</span>main<span
lang=ZH-CN>函数结束后调用</span>exit<span lang=ZH-CN>函数，而</span>exit<span lang=ZH-CN>函数最终将调用</span>sys_exit<span
lang=ZH-CN>系统调用，让操作系统回收进程资源。</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:12.0pt;font-family:楷体'>user/libs/ulib.[ch]<span
lang=ZH-CN>：实现了最小的</span>C<span lang=ZH-CN>函数库，除了一些与系统调用无关的函数，其他函数是对访问系统调用的包装。</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:12.0pt;font-family:楷体'>user/libs/syscall.[ch]<span
lang=ZH-CN>：用户层发出系统调用的具体实现。</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:12.0pt;font-family:楷体'>user/libs/stdio.c<span
lang=ZH-CN>：实现</span>cprintf<span lang=ZH-CN>函数，通过系统调用</span>sys_putc<span
lang=ZH-CN>来完成字符输出。</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:12.0pt;font-family:楷体'>user/libs/panic.c<span
lang=ZH-CN>：实现</span>__panic/__warn<span lang=ZH-CN>函数，通过系统调用</span>sys_exit<span
lang=ZH-CN>完成用户进程退出。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>除了这些用户态库函数实现外，还有一些</span><span
style='font-family:楷体'>libs/*.[ch]<span lang=AR-SA>是操作系统内核和应用程序共用的函数实现。这些用户库函数其实在本质上与</span>UNIX<span
lang=AR-SA>系统中的标准</span>libc<span lang=AR-SA>没有区别，只是实现得很简单，但</span>hello<span
lang=AR-SA>应用程序的正确执行离不开这些库函数。</span></span></p>

<p class=MsoNormalIndent style='text-indent:21.0pt'><span lang=ZH-CN
style='font-family:楷体'>【注意】</span><span style='font-family:楷体'>libs/*.[ch]<span
lang=ZH-CN>、</span>user/libs/*.[ch]<span lang=ZH-CN>、</span>user/*.[ch]<span
lang=ZH-CN>的源码中没有任何特权指令。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在</span><span style='font-family:
楷体'>make<span lang=AR-SA>的最后一步执行了一个</span>ld<span lang=AR-SA>命令，把</span>hello<span
lang=AR-SA>应用程序的执行码</span>obj/__user_hello.out<span lang=AR-SA>连接在了</span>ucore
kernel<span lang=AR-SA>的末尾。且</span>ld<span lang=AR-SA>命令会在</span>kernel<span
lang=AR-SA>中会把</span>__user_hello.out<span lang=AR-SA>的位置和大小记录在全局变量</span>_binary_obj___user_hello_out_start<span
lang=AR-SA>和</span>_binary_obj___user_hello_out_size<span lang=AR-SA>中，这样这个</span>hello<span
lang=AR-SA>用户程序就能够和</span>ucore<span lang=AR-SA>内核一起被</span> bootloader <span
lang=AR-SA>加载到内存里中，并且通过这两个全局变量定位</span>hello<span lang=AR-SA>用户程序执行码的起始位置和大小。而到了与文件系统相关的实验后，</span>ucore<span
lang=AR-SA>会提供一个简单的文件系统，那时所有的用户程序就都不再用这种方法进行加载了，而可以用大家熟悉的文件方式进行加载了。 </span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:34.95pt;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0cm;text-autospace:none'><b><span>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=ZH-CN style='font-family:楷体'>用户进程的虚拟地址空间</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在</span><span style='font-family:
楷体'>tools/user.ld<span lang=AR-SA>描述了用户程序的用户虚拟空间的执行入口虚拟地址：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SECTIONS {</span></p>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>    /* Load
  programs at this address: &quot;.&quot; means the current address */</span></p>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>    . =
  0x800020;</span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在</span><span style='font-family:
楷体'>tools/kernel.ld<span lang=AR-SA>描述了操作系统的内核虚拟空间的起始入口虚拟地址：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SECTIONS {</span></p>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>    /* Load
  the kernel at this address: &quot;.&quot; means the current address */</span></p>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>    . =
  0xC0100000;</span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>这样</span><span
style='font-family:楷体'>ucore<span lang=AR-SA>把用户进程的虚拟地址空间分了两块，一块与内核线程一样，是所有用户进程都共享的内核虚拟地址空间，映射到同样的物理内存空间中，这样在物理内存中只需放置一份内核代码，使得用户进程从用户态进入核心态时，内核代码可以统一应对不同的内核程序；另外一块是用户虚拟地址空间，虽然虚拟地址范围一样，但映射到不同且没有交集的物理内存空间中。这样当</span>ucore<span
lang=AR-SA>把用户进程的执行代码（即应用程序的执行代码）和数据（即应用程序的全局变量等）放到用户虚拟地址空间中时，确保了各个进程不会</span>“<span
lang=AR-SA>非法</span>”<span lang=AR-SA>访问到其他进程的物理内存空间。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>这样</span><span
style='font-family:楷体'>ucore<span lang=AR-SA>给一个用户进程具体设定的虚拟内存空间（</span>kern/mm/memlayout.h<span
lang=AR-SA>）如下所示：</span></span></p>

<p class=MsoNormal><span style='font-family:楷体'>                                                                   </span></p>

<p class=MsoNormal align=center style='text-align:center;text-indent:24.0pt'><span
style='font-family:楷体'><img width=237 height=217 id="图片 1"
src="lab5.files/image001.png"></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:34.95pt;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0cm;text-autospace:none'><b><span>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=ZH-CN style='font-family:楷体'>创建并执行用户进程</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span style='font-family:楷体'>   </span><span lang=AR-SA
style='font-family:楷体'>在确定了用户进程的执行代码和数据，以及用户进程的虚拟空间布局后，我们可以来创建用户进程了。在本实验中第一个用户进程是由第二个内核线程</span><span
style='font-family:楷体'>initproc<span lang=AR-SA>通过把</span>hello<span
lang=AR-SA>应用程序执行码覆盖到</span>initproc<span lang=AR-SA>的用户虚拟内存空间来创建的，相关代码如下所示：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p><i><span style='font-size:8.0pt;font-family:楷体;color:blue'>//</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>kernel_execve</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>-</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>do</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>SYS_exec</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>syscall</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>to</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>exec</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>a</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>user</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>program</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>called</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>by</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>user_main</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>kernel_thread<br>
  </span></i><b><span style='font-size:8.0pt;font-family:楷体;color:navy'>static</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体;color:navy'>int</span></b><span style='font-size:8.0pt;
  font-family:楷体;color:gray'><br>
  </span><span style='font-size:8.0pt;font-family:楷体'>kernel_execve<b>(<span
  style='color:navy'>const</span></b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><b><span style='font-size:8.0pt;font-family:楷体;
  color:navy'>char</span></b><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>*</span></b><span style='font-size:
  8.0pt;font-family:楷体'>name<b>,</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><b><span style='font-size:8.0pt;font-family:楷体;
  color:navy'>unsigned</span></b><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体;color:navy'>char</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体'>*</span></b><span style='font-size:8.0pt;font-family:
  楷体'>binary<b>,</b></span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>size_t</span><span style='font-size:
  8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体'>size<b>)</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体'>{</span></b><span style='font-size:8.0pt;font-family:
  楷体;color:gray'><br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体;color:navy'>int</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>ret<b>,</b></span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>len</span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><b><span style='font-size:8.0pt;font-family:楷体'>=</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>strlen<b>(</b>name<b>);</b><span style='color:gray'><br>
  </span></span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体;color:navy'>asm</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体;color:navy'>volatile</span></b><span style='font-size:
  8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:8.0pt;font-family:
  楷体'>(</span></b><span style='font-size:8.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:#CC0000'>&quot;int</span><span
  style='font-size:8.0pt;color:#CC0000'>&nbsp;</span><span style='font-size:
  8.0pt;font-family:楷体;color:#CC0000'>%1;&quot;</span><span style='font-size:
  8.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>:</span></b><span style='font-size:
  8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;=a&quot;</span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>ret<b>)</b><span style='color:gray'><br>
  </span></span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>:</span></b><span style='font-size:
  8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;i&quot;</span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>T_SYSCALL<b>),</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;0&quot;</span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>SYS_exec<b>),</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;d&quot;</span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>name<b>),</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;c&quot;</span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>len<b>),</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;b&quot;</span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>binary<b>),</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;D&quot;</span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>size<b>)</b><span style='color:gray'><br>
  </span></span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>:</span></b><span style='font-size:
  8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>&quot;memory&quot;</span><b><span style='font-size:8.0pt;
  font-family:楷体'>);</span></b><span style='font-size:8.0pt;font-family:楷体;
  color:gray'><br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体;color:navy'>return</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>ret<b>;</b><span style='color:gray'><br>
  </span><b>}</b><span style='color:gray'><br>
  <br>
  </span><b><span style='color:green'>#define</span></b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>__KERNEL_EXECVE<b>(</b>name<b>,</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>binary<b>,</b></span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>size<b>)</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体'>({</span></b><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>cprintf<b>(</b><span style='color:
  #CC0000'>&quot;kernel_execve:</span></span><span style='font-size:8.0pt;
  color:#CC0000'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>pid</span><span style='font-size:8.0pt;color:#CC0000'>&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:#CC0000'>=</span><span
  style='font-size:8.0pt;color:#CC0000'>&nbsp;</span><span style='font-size:
  8.0pt;font-family:楷体;color:#CC0000'>%d,</span><span style='font-size:8.0pt;
  color:#CC0000'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体;
  color:#CC0000'>name</span><span style='font-size:8.0pt;color:#CC0000'>&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:#CC0000'>=</span><span
  style='font-size:8.0pt;color:#CC0000'>&nbsp;</span><span style='font-size:
  8.0pt;font-family:楷体;color:#CC0000'>\&quot;%s\&quot;.\n&quot;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>,</span></b><span style='font-size:
  8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>current<b>-&gt;</b>pid<b>,</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>name<b>);</b></span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>kernel_execve<b>(</b>name<b>,</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>binary<b>,</b></span><span style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>(</span></b><span style='font-size:
  8.0pt;font-family:楷体'>size_t<b>)(</b>size<b>));</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>})</span></b><span style='font-size:
  8.0pt;font-family:楷体;color:gray'><br>
  <br>
  </span><b><span style='font-size:8.0pt;font-family:楷体;color:green'>#define</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>KERNEL_EXECVE<b>(</b>x<b>)</b></span><span style='font-size:
  8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:8.0pt;font-family:
  楷体'>({</span></b><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体;color:navy'>extern</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体;color:navy'>unsigned</span></b><span style='font-size:
  8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:8.0pt;font-family:
  楷体;color:navy'>char</span></b><span style='font-size:8.0pt;color:gray'>&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>_binary_obj___user_<span
  style='color:gray'>##</span>x<span style='color:gray'>##</span>_out_start<b>[],</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;</span><span style='font-size:
  8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>_binary_obj___user_<span
  style='color:gray'>##</span>x<span style='color:gray'>##</span>_out_size<b>[];</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>__KERNEL_EXECVE<b>(</b><span
  style='color:gray'>#</span>x<b>,</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体'>_binary_obj___user_<span
  style='color:gray'>##</span>x<span style='color:gray'>##</span>_out_start<b>,</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>_binary_obj___user_<span
  style='color:gray'>##</span>x<span style='color:gray'>##</span>_out_size<b>);</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体;color:gray'>\<br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>})</span></b><span style='font-size:
  8.0pt;font-family:楷体;color:gray'><br>
  ……<br>
  </span><i><span style='font-size:8.0pt;font-family:楷体;color:blue'>//</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>init_main</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>-</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>the</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>second</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>kernel</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>thread</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>used</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>to</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>create</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>kswapd_main</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>&amp;</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>user_main</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>kernel</span></i><i><span
  style='font-size:8.0pt;color:blue'>&nbsp;</span></i><i><span
  style='font-size:8.0pt;font-family:楷体;color:blue'>threads<br>
  </span></i><b><span style='font-size:8.0pt;font-family:楷体;color:navy'>static</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体;color:navy'>int</span></b><span style='font-size:8.0pt;
  font-family:楷体;color:gray'><br>
  </span><span style='font-size:8.0pt;font-family:楷体'>init_main<b>(<span
  style='color:navy'>void</span></b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><b><span style='font-size:8.0pt;font-family:楷体'>*</span></b><span
  style='font-size:8.0pt;font-family:楷体'>arg<b>)</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  8.0pt;font-family:楷体'>{</span></b><span style='font-size:8.0pt;font-family:
  楷体;color:gray'><br>
  </span><b><span style='font-size:8.0pt;font-family:楷体;color:green'>#ifdef</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>TEST<span style='color:gray'><br>
  </span></span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>KERNEL_EXECVE2<b>(</b>TEST<b>,</b></span><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体'>TESTSTART<b>,</b></span><span style='font-size:8.0pt;
  color:gray'>&nbsp;</span><span style='font-size:8.0pt;font-family:楷体'>TESTSIZE<b>);</b><span
  style='color:gray'><br>
  </span><b><span style='color:green'>#else</span></b><span style='color:gray'><br>
  </span></span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>KERNEL_EXECVE<b>(</b>hello<b>);</b><span
  style='color:gray'><br>
  </span><b><span style='color:green'>#endif</span></b><span style='color:gray'><br>
  </span></span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:8.0pt;font-family:楷体'>panic<b>(</b><span style='color:#CC0000'>&quot;kernel_execve</span></span><span
  style='font-size:8.0pt;color:#CC0000'>&nbsp;</span><span style='font-size:
  8.0pt;font-family:楷体;color:#CC0000'>failed.\n&quot;</span><b><span
  style='font-size:8.0pt;font-family:楷体'>);</span></b><span style='font-size:
  8.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:8.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:8.0pt;font-family:楷体;color:navy'>return</span></b><span
  style='font-size:8.0pt;color:gray'>&nbsp;</span><span style='font-size:8.0pt;
  font-family:楷体;color:teal'>0</span><b><span style='font-size:8.0pt;
  font-family:楷体'>;</span></b><span style='font-size:8.0pt;font-family:楷体;
  color:gray'><br>
  </span><b><span style='font-size:8.0pt;font-family:楷体'>}</span></b></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>对于上述代码，我们需要从后向前按照函数</span><span
style='font-family:楷体'>/<span lang=AR-SA>宏的实现一个一个来分析。</span>Initproc<span
lang=AR-SA>的执行主体是</span>init_main<span lang=AR-SA>函数，这个函数在缺省情况下是执行宏</span>KERNEL_EXECVE(hello)<span
lang=AR-SA>，而这个宏最终是调用</span>kernel_execve<span lang=AR-SA>函数来调用</span>SYS_exec<span
lang=AR-SA>系统调用，由于</span>ld<span lang=AR-SA>在链接</span>hello<span lang=AR-SA>应用程序执行码时定义了两全局变量：</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-family:楷体'>_binary_obj___user_hello_out_start<span
lang=ZH-CN>：</span>hello<span lang=ZH-CN>执行码的起始位置</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-family:楷体'>_binary_obj___user_hello_out_size<span
lang=ZH-CN>中：</span>hello<span lang=ZH-CN>执行码的大小</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span style='font-family:楷体'>kernel_execve<span lang=AR-SA>把这两个变量作为</span>SYS_exec<span
lang=AR-SA>系统调用的参数，让</span>ucore<span lang=AR-SA>来创建此用户进程。当</span>ucore<span
lang=AR-SA>收到此系统调用后，将依次调用如下函数</span></span></p>

<p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
font-family:楷体'>vector128(vectors.S)--&gt;
__alltraps(trapentry.S)--&gt;trap(trap.c)--&gt;trap_dispatch(trap.c)--</span></p>

<p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
font-family:楷体'>--&gt;syscall(syscall.c)--&gt;sys_exec<span lang=ZH-CN>（</span>syscall.c<span
lang=ZH-CN>）</span>--&gt;do_execve(proc.c)</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>最终通过</span><span
style='font-family:楷体'>do_execve<span lang=AR-SA>函数来完成用户进程的创建工作。此函数的主要工作流程如下：</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-family:楷体'>首先为加载新的执行码做好用户态内存空间清空准备。如果</span><span
style='font-family:楷体'>mm<span lang=ZH-CN>不为</span>NULL<span lang=ZH-CN>，则设置页表为内核空间页表，且进一步判断</span>mm<span
lang=ZH-CN>的引用计数减</span>1<span lang=ZH-CN>后是否为</span>0<span lang=ZH-CN>，如果为</span>0<span
lang=ZH-CN>，则表明没有进程再需要此进程所占用的内存空间，为此将根据</span>mm<span lang=ZH-CN>中的记录，释放进程所占用户空间内存和进程页表本身所占空间。最后把当前进程的</span>mm<span
lang=ZH-CN>内存管理指针为空。由于此处的</span>initproc<span lang=ZH-CN>是内核线程，所以</span>mm<span
lang=ZH-CN>为</span>NULL<span lang=ZH-CN>，整个处理都不会做。</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-family:楷体'>接下来的一步是加载应用程序执行码到当前进程的新创建的用户态虚拟空间中。这里涉及到读</span><span
style='font-family:楷体'>ELF<span lang=ZH-CN>格式的文件，申请内存空间，建立用户态虚存空间，加载应用程序执行码等。</span>load_icode<span
lang=ZH-CN>函数完成了整个复杂的工作。</span></span></p>

<p class=MsoNormalIndent style='text-indent:21.0pt'><span style='font-family:
楷体'>load_icode<span lang=ZH-CN>函数的主要工作就是给用户进程建立一个能够让用户进程正常运行的用户环境。此函数有一百多行，完成了如下重要工作：</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>调用</span><span
style='font-size:12.0pt;font-family:楷体'>mm_create<span lang=ZH-CN>函数来申请进程的内存管理数据结构</span>mm<span
lang=ZH-CN>所需内存空间，并对</span>mm<span lang=ZH-CN>进行初始化； </span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>调用</span><span
style='font-size:12.0pt;font-family:楷体'>setup_pgdir<span lang=ZH-CN>来申请一个页目录表所需的一个页大小的内存空间，并把描述</span>ucore<span
lang=ZH-CN>内核虚空间映射的内核页表（</span>boot_pgdir<span lang=ZH-CN>所指）的内容拷贝到此新目录表中，最后让</span>mm-&gt;pgdir<span
lang=ZH-CN>指向此页目录表，这就是进程新的页目录表了，且能够正确映射内核虚空间；</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>根据应用程序执行码的起始位置来解析此</span><span
style='font-size:12.0pt;font-family:楷体'>ELF<span lang=ZH-CN>格式的执行程序，并调用</span>mm_map<span
lang=ZH-CN>函数根据</span>ELF<span lang=ZH-CN>格式的执行程序说明的各个段（代码段、数据段、</span>BSS<span
lang=ZH-CN>段等）的起始位置和大小建立对应的</span>vma<span lang=ZH-CN>结构，并把</span>vma<span
lang=ZH-CN>插入到</span>mm<span lang=ZH-CN>结构中，从而表明了用户进程的合法用户态虚拟地址空间； </span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>调用根据执行程序各个段的大小分配物理内存空间，并根据执行程序各个段的起始位置确定虚拟地址，并在页表中建立好物理地址和虚拟地址的映射关系，然后把执行程序各个段的内容拷贝到相应的内核虚拟地址中，至此应用程序执行码和数据已经根据编译时设定地址放置到虚拟内存中了；</span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>需要给用户进程设置用户栈，为此调用</span><span
style='font-size:12.0pt;font-family:楷体'>mm_mmap<span lang=ZH-CN>函数建立用户栈的</span>vma<span
lang=ZH-CN>结构，明确用户栈的位置在用户虚空间的顶端，大小为</span>256<span lang=ZH-CN>个页，即</span>1MB<span
lang=ZH-CN>，并分配一定数量的物理内存且建立好栈的虚地址</span>&lt;--&gt;<span lang=ZH-CN>物理地址映射关系；</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>6.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>至此</span><span
style='font-size:12.0pt;font-family:楷体'>,<span lang=ZH-CN>进程内的内存管理</span>vma<span
lang=ZH-CN>和</span>mm<span lang=ZH-CN>数据结构已经建立完成，于是把</span>mm-&gt;pgdir<span
lang=ZH-CN>赋值到</span>cr3<span lang=ZH-CN>寄存器中，即更新了用户进程的虚拟内存空间，此时的</span>initproc<span
lang=ZH-CN>已经被</span>hello<span lang=ZH-CN>的代码和数据覆盖，成为了第一个用户进程，但此时这个用户进程的执行现场还没建立好；</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>7.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>先清空进程的中断帧，再重新设置进程的中断帧，使得在执行中断返回指令</span><span
style='font-size:12.0pt;font-family:楷体'>“iret”<span lang=ZH-CN>后，能够让</span>CPU<span
lang=ZH-CN>转到用户态特权级，并回到用户态内存空间，使用用户态的代码段、数据段和堆栈，且能够跳转到用户进程的第一条指令执行，并确保在用户态能够响应中断；</span></span></p>

<p class=MsoNormalIndent style='margin-left:21.0pt;text-indent:0cm'><span
style='font-family:楷体'>&nbsp;</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>至此，用户进程的用户环境已经搭建完毕。此时</span><span
style='font-family:楷体'>initproc<span lang=AR-SA>将按产生系统调用的函数调用路径原路返回，执行中断返回指令</span>“iret”<span
lang=AR-SA>（位于</span>trapentry.S<span lang=AR-SA>的最后一句）后，将切换到用户进程</span>hello<span
lang=AR-SA>的第一条语句位置</span>_start<span lang=AR-SA>处（位于</span>user/libs/initcode.S<span
lang=AR-SA>的第三句）开始执行。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span style='font-family:楷体'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
style='font-size:14.0pt'>3.3 </span></b><b><span lang=ZH-CN style='font-size:
14.0pt;font-family:楷体'>进程退出和等待进程</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>当进程执行完它的工作后，就需要执行退出操作，释放进程占用的资源。</span><span
style='font-family:楷体'>ucore<span lang=AR-SA>分了两步来完成这个工作，首先由进程本身完成大部分资源的占用内存回收工作，然后由此进程的父进程完成剩余资源占用内存的回收工作。为何不让进程本身完成所有的资源回收工作呢？这是因为进程要执行回收操作，就表明此进程还存在，还在执行指令，这就需要内核栈的空间不能释放，且表示进程存在的进程控制块不能释放。所以需要父进程来帮忙释放子进程无法完成的这两个资源回收工作。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>为此在用户态的函数库中提供了</span><span
style='font-family:楷体'>exit<span lang=AR-SA>函数，此函数最终访问</span>sys_exit<span
lang=AR-SA>系统调用接口让操作系统来帮助当前进程执行退出过程中的部分资源回收。我们来看看</span>ucore<span lang=AR-SA>是如何做进程退出工作的。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>首先，</span><span
style='font-family:楷体'>exit<span lang=AR-SA>函数会把一个退出码</span>error_code<span
lang=AR-SA>传递给</span>ucore<span lang=AR-SA>，</span>ucore<span lang=AR-SA>通过执行内核函数</span>do_exit<span
lang=AR-SA>来完成对当前进程的退出处理，主要工作简单地说就是回收当前进程所占的大部分内存资源，并通知父进程完成最后的回收工作，具体流程如下：</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>如果</span><span
style='font-size:12.0pt;font-family:楷体'>current-&gt;mm != NULL<span lang=ZH-CN>，表示是用户进程，则开始回收此用户进程所占用的用户态虚拟内存空间；</span></span></p>

<p class=MsoNormalIndent style='margin-left:66.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>a)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>首先执行</span><span
style='font-size:12.0pt;font-family:楷体'>“lcr3(boot_cr3)”<span lang=ZH-CN>，切换到内核态的页表上，这样当前用户进程目前只能在内核虚拟地址空间执行了，这是为了确保后续释放用户态内存和进程页表的工作能够正常执行；</span></span></p>

<p class=MsoNormalIndent style='margin-left:66.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>b)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>如果当前进程控制块的成员变量</span><span
style='font-size:12.0pt;font-family:楷体'>mm<span lang=ZH-CN>的成员变量</span>mm_count<span
lang=ZH-CN>减</span>1<span lang=ZH-CN>后为</span>0<span lang=ZH-CN>（表明这个</span>mm<span
lang=ZH-CN>没有再被其他进程共享，可以彻底释放进程所占的用户虚拟空间了。），则开始回收用户进程所占的内存资源：</span></span></p>

<p class=MsoNormalIndent style='margin-left:87.4pt;text-indent:-87.4pt'><span
style='font-size:12.0pt;font-family:楷体'><span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>i.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>调用</span><span
style='font-size:12.0pt;font-family:楷体'>exit_mmap<span lang=ZH-CN>函数释放</span>current-&gt;mm-&gt;vma<span
lang=ZH-CN>链表中每个</span>vma<span lang=ZH-CN>描述的进程合法空间中实际分配的内存，然后把对应的页表项内容清空，最后还把页表所占用的空间释放并把对应的页目录表项清空；</span></span></p>

<p class=MsoNormalIndent style='margin-left:87.4pt;text-indent:-87.4pt'><span
style='font-size:12.0pt;font-family:楷体'><span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>ii.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>调用</span><span
style='font-size:12.0pt;font-family:楷体'>put_pgdir<span lang=ZH-CN>函数释放当前进程的页目录所占的内存；</span></span></p>

<p class=MsoNormalIndent style='margin-left:87.4pt;text-indent:-87.4pt'><span
style='font-size:12.0pt;font-family:楷体'><span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>iii.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>调用</span><span
style='font-size:12.0pt;font-family:楷体'>mm_destroy<span lang=ZH-CN>函数释放</span>mm<span
lang=ZH-CN>中的</span>vma<span lang=ZH-CN>所占内存，最后释放</span>mm<span lang=ZH-CN>所占内存；</span></span></p>

<p class=MsoNormalIndent style='margin-left:66.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>c)<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>此时设置</span><span
style='font-size:12.0pt;font-family:楷体'>current-&gt;mm<span lang=ZH-CN>为</span>NULL<span
lang=ZH-CN>，表示与当前进程相关的用户虚拟内存空间和对应的内存管理成员变量所占的内核虚拟内存空间已经回收完毕；</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>这时，设置当前进程的执行状态</span><span
style='font-size:12.0pt;font-family:楷体'>current-&gt;state=PROC_ZOMBIE<span
lang=ZH-CN>，当前进程的退出码</span>current-&gt;exit_code=error_code<span lang=ZH-CN>。此时当前进程已经不能被调度了，需要此进程的父进程来做最后的回收工作（即回收描述此进程的内核栈和进程控制块）；</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>如果当前进程的父进程</span><span
style='font-size:12.0pt;font-family:楷体'>current-&gt;parent<span lang=ZH-CN>处于等待子进程状态：</span></span></p>

<p class=MsoNormalIndent style='margin-left:24.35pt;text-indent:66.0pt'><span
style='font-size:12.0pt;font-family:楷体'>current-&gt;parent-&gt;wait_state==WT_CHILD<span
lang=ZH-CN>，</span></span></p>

<p class=MsoNormalIndent style='margin-left:24.35pt;text-indent:24.0pt'><span
lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>则唤醒父进程（即执行</span><span
style='font-size:12.0pt;font-family:楷体'>“wakup_proc(current-&gt;parent)”<span
lang=ZH-CN>），让父进程帮助自己完成最后的资源回收；</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>如果当前进程还有子进程，则需要把这些子进程的父进程指针设置为内核线程</span><span
style='font-size:12.0pt;font-family:楷体'>initproc<span lang=ZH-CN>，且各个子进程指针需要插入到</span>initproc<span
lang=ZH-CN>的子进程链表中。如果某个子进程的执行状态是</span>PROC_ZOMBIE<span lang=ZH-CN>，则需要唤醒</span>initproc<span
lang=ZH-CN>来完成对此子进程的最后回收工作。</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>执行</span><span
style='font-size:12.0pt;font-family:楷体'>schedule()<span lang=ZH-CN>函数，选择新的进程执行。</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:0cm'><span
style='font-family:楷体'>&nbsp;</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span style='font-family:楷体'> </span><span lang=AR-SA style='font-family:
楷体'>那么父进程如何完成对子进程的最后回收工作呢？这要求父进程要执行</span><span style='font-family:楷体'>wait<span
lang=AR-SA>用户函数或</span>wait_pid<span lang=AR-SA>用户函数，这两个函数的区别是，</span>wait<span
lang=AR-SA>函数等待任意子进程的结束通知，而</span>wait_pid<span lang=AR-SA>函数等待进程</span>id<span
lang=AR-SA>号为</span>pid<span lang=AR-SA>的子进程结束通知。这两个函数最终访问</span>sys_wait<span
lang=AR-SA>系统调用接口让</span>ucore<span lang=AR-SA>来完成对子进程的最后回收工作，即回收子进程的内核栈和进程控制块所占内存空间，具体流程如下：</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>如果</span><span
style='font-size:12.0pt;font-family:楷体'>pid!=0<span lang=ZH-CN>，表示只找一个进程</span>id<span
lang=ZH-CN>号为</span>pid<span lang=ZH-CN>的退出状态的子进程，否则找任意一个处于退出状态的子进程；</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>如果此子进程的执行状态不为</span><span
style='font-size:12.0pt;font-family:楷体'>PROC_ZOMBIE<span lang=ZH-CN>，表明此子进程还没有退出，则当前进程只好设置自己的执行状态为</span>PROC_SLEEPING<span
lang=ZH-CN>，睡眠原因为</span>WT_CHILD<span lang=ZH-CN>（即等待子进程退出），调用</span>schedule()<span
lang=ZH-CN>函数选择新的进程执行，自己睡眠等待，如果被唤醒，则重复跳回步骤</span>1<span lang=ZH-CN>处执行；</span></span></p>

<p class=MsoNormalIndent style='margin-left:42.0pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:楷体'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>如果此子进程的执行状态为</span><span
style='font-size:12.0pt;font-family:楷体'>PROC_ZOMBIE<span lang=ZH-CN>，表明此子进程处于退出状态，需要当前进程（即子进程的父进程）完成对子进程的最终回收工作，即首先把子进程控制块从两个进程队列</span>proc_list<span
lang=ZH-CN>和</span>hash_list<span lang=ZH-CN>中删除，并释放子进程的内核堆栈和进程控制块。自此，子进程才彻底地结束了它的执行过程，消除了它所占用的所有资源。</span></span></p>

<p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:12.0pt;
font-family:楷体'>&nbsp;</span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
style='font-size:14.0pt'>3.4 </span></b><b><span lang=ZH-CN style='font-size:
14.0pt;font-family:楷体'>系统调用实现</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>系统调用的英文名字是</span><span
style='font-family:楷体'>System Call<span lang=AR-SA>。操作系统为什么需要实现系统调用呢？其实这是实现了用户进程后，自然引申出来需要实现的操作系统功能。用户进程只能在操作系统给它圈定好的</span>“<span
lang=AR-SA>用户环境</span>”<span lang=AR-SA>中执行，但</span>“<span lang=AR-SA>用户环境</span>”<span
lang=AR-SA>限制了用户进程能够执行的指令，即用户进程只能执行一般的指令，无法执行特权指令。如果用户进程想执行一些需要特权指令的任务，比如通过网卡发网络包等，只能让操作系统来代劳了。于是就需要一种机制来确保用户进程不能执行特权指令，但能够请操作系统</span>“<span
lang=AR-SA>帮忙</span>”<span lang=AR-SA>完成需要特权指令的任务，这种机制就是系统调用。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>采用系统调用机制为用户进程提供一个获得操作系统服务的统一接口层，这样一来可简化用户进程的实现，把一些共性的、繁琐的、与硬件相关、与特权指令相关的任务放到操作系统层来实现，但提供一个简洁的接口给用户进程调用；二来这层接口事先可规定好，且严格检查用户进程传递进来的参数和操作系统要返回的数据，使得让操作系统给用户进程服务的同时，保护操作系统不会被用户进程破坏。</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从硬件层面上看，需要硬件能够支持在用户态的用户进程通过某种机制切换到内核态。试验一讲述中断硬件支持和软件处理过程其实就可以用来完成系统调用所需的软硬件支持。下面我们来看看如何在</span><span
style='font-family:楷体'>ucore<span lang=AR-SA>中实现系统调用。</span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:34.95pt;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0cm;text-autospace:none'><b><span>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=ZH-CN style='font-family:楷体'>初始化系统调用对应的中断描述符</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在</span><span style='font-family:
楷体'>ucore<span lang=AR-SA>初始化函数</span>kern_init<span lang=AR-SA>中调用了</span>idt_init<span
lang=AR-SA>函数来初始化中断描述符表，并设置一个特定中断号的中断门，专门用于用户进程访问系统调用。此事由</span>ide_init<span
lang=AR-SA>函数完成：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p><b><span style='font-size:9.0pt;font-family:楷体;color:navy'>void</span></b><span
  style='font-size:9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;font-family:楷体'>idt_init<b>(<span
  style='color:navy'>void</span>)</b></span><span style='font-size:9.0pt;
  color:gray'>&nbsp;</span><b><span style='font-size:9.0pt;font-family:楷体'>{</span></b><span
  style='font-size:9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>extern</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>uintptr_t</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>__vectors<b>[];</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>int</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>i<b>;</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>for</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>i</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>=</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体;
  color:teal'>0</span><b><span style='font-size:9.0pt;font-family:楷体'>;</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>i</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>&lt;</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:9.0pt;font-family:
  楷体;color:navy'>sizeof</span></b><b><span style='font-size:9.0pt;font-family:
  楷体'>(</span></b><span style='font-size:9.0pt;font-family:楷体'>idt<b>)</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>/</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>sizeof</span></b><b><span
  style='font-size:9.0pt;font-family:楷体'>(<span style='color:navy'>struct</span></span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>gatedesc<b>);</b></span><span style='font-size:9.0pt;
  color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>i</span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>++)</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>{</span></b><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>SETGATE<b>(</b>idt<b>[</b>i<b>],</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体;color:teal'>1</span><b><span style='font-size:9.0pt;
  font-family:楷体'>,</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>GD_KTEXT<b>,</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>__vectors<b>[</b>i<b>],</b></span><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>DPL_KERNEL<b>);</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>}</span></b><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>SETGATE<b>(</b>idt<b>[</b>T_SYSCALL<b>],</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体;color:teal'>1</span><b><span style='font-size:9.0pt;
  font-family:楷体'>,</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>GD_KTEXT<b>,</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>__vectors<b>[</b>T_SYSCALL<b>],</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>DPL_USER<b>);</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>lidt<b>(&amp;</b>idt_pd<b>);</b><span
  style='color:gray'><br>
  </span><b>}</b></span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在上述代码中，可以看到在执行加载中断描述符表</span><span
style='font-family:楷体'>lidt<span lang=AR-SA>指令前，专门设置了一个特殊的中断描述符</span>idt[T_SYSCALL]<span
lang=AR-SA>，它的特权级设置为</span>DPL_USER<span lang=AR-SA>，中断向量处理地址在</span>__vectors[T_SYSCALL]<span
lang=AR-SA>处。这样建立好这个中断描述符后，一旦用户进程执行</span> “INT T_SYSCALL”<span lang=AR-SA>后，由于此中断允许用户态进程产生（注意它的特权级设置为</span>DPL_USER<span
lang=AR-SA>），所以</span>CPU<span lang=AR-SA>就会从用户态切换到内核态，保存相关寄存器，并跳转到</span>__vectors[T_SYSCALL]<span
lang=AR-SA>处开始执行，形成如下执行路径：</span></span></p>

<p class=MsoNormalIndent style='text-indent:13.5pt'><span style='font-size:
9.0pt;font-family:楷体'>vector128(vectors.S)--&gt;
__alltraps(trapentry.S)--&gt;trap(trap.c)--&gt;trap_dispatch(trap.c)----&gt;syscall(syscall.c)-</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在</span><span style='font-family:
楷体'>syscall<span lang=AR-SA>中，根据系统调用号来完成不同的系统调用服务。</span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:34.95pt;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0cm;text-autospace:none'><b><span>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=ZH-CN style='font-family:楷体'>建立系统调用的用户库准备</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在操作系统中初始化好系统调用相关的中断描述符、中断处理起始地址等后，还需在用户态的应用程序中初始化好相关工作，简化应用程序访问系统调用的复杂性。为此在用户态建立了一个中间层，即简化的</span><span
style='font-family:楷体'>libc<span lang=AR-SA>实现，在</span>user/libs/ulib.[ch]<span
lang=AR-SA>和</span>user/libs/syscall.[ch]<span lang=AR-SA>中完成了对访问系统调用的封装。用户态最终的访问系统调用函数是</span>syscall<span
lang=AR-SA>，实现如下：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p><b><span style='font-size:9.0pt;font-family:楷体;color:navy'>static</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体;color:navy'>inline</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:9.0pt;font-family:
  楷体;color:navy'>int</span></b><span style='font-size:9.0pt;font-family:楷体;
  color:gray'><br>
  </span><span style='font-size:9.0pt;font-family:楷体'>syscall<b>(<span
  style='color:navy'>int</span></b></span><span style='font-size:9.0pt;
  color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>num<b>,</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>...)</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>{</span></b><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>va_list</span><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>ap<b>;</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>va_start<b>(</b>ap<b>,</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>num<b>);</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>uint32_t</span><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>a<b>[</b>MAX_ARGS<b>];</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>int</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>i<b>,</b></span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>ret<b>;</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>for</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>i</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>=</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体;
  color:teal'>0</span><b><span style='font-size:9.0pt;font-family:楷体'>;</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>i</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>&lt;</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>MAX_ARGS<b>;</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>i</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>++)</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:9.0pt;font-family:
  楷体'>{</span></b><span style='font-size:9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>a<b>[</b>i<b>]</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>=</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>va_arg<b>(</b>ap<b>,</b></span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>uint32_t<b>);</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>}</span></b><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>va_end<b>(</b>ap<b>);</b><span
  style='color:gray'><br>
  <br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>asm</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体;color:navy'>volatile</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:9.0pt;font-family:
  楷体'>(</span></b><span style='font-size:9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;int</span><span
  style='font-size:9.0pt;color:#CC0000'>&nbsp;</span><span style='font-size:
  9.0pt;font-family:楷体;color:#CC0000'>%1;&quot;</span><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>:</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体;
  color:#CC0000'>&quot;=a&quot;</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>(</span></b><span style='font-size:
  9.0pt;font-family:楷体'>ret<b>)</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>:</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体;
  color:#CC0000'>&quot;i&quot;</span><span style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>(</span></b><span style='font-size:
  9.0pt;font-family:楷体'>T_SYSCALL<b>),</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;a&quot;</span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>num<b>),</b><span style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;d&quot;</span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>a<b>[</b><span style='color:teal'>0</span><b>]),</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;c&quot;</span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>a<b>[</b><span style='color:teal'>1</span><b>]),</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;b&quot;</span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>a<b>[</b><span style='color:teal'>2</span><b>]),</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;D&quot;</span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>a<b>[</b><span style='color:teal'>3</span><b>]),</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;S&quot;</span><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><b><span style='font-size:
  9.0pt;font-family:楷体'>(</span></b><span style='font-size:9.0pt;font-family:
  楷体'>a<b>[</b><span style='color:teal'>4</span><b>])</b><span
  style='color:gray'><br>
  </span></span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>:</span></b><span style='font-size:
  9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体;
  color:#CC0000'>&quot;cc&quot;</span><b><span style='font-size:9.0pt;
  font-family:楷体'>,</span></b><span style='font-size:9.0pt;color:gray'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体;color:#CC0000'>&quot;memory&quot;</span><b><span
  style='font-size:9.0pt;font-family:楷体'>);</span></b><span style='font-size:
  9.0pt;font-family:楷体;color:gray'><br>
  </span><span style='font-size:9.0pt;color:gray'>&nbsp;&nbsp;&nbsp;&nbsp;</span><b><span
  style='font-size:9.0pt;font-family:楷体;color:navy'>return</span></b><span
  style='font-size:9.0pt;color:gray'>&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'>ret<b>;</b><span style='color:gray'><br>
  </span><b>}</b></span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从中可以看出，应用程序调用的</span><span
style='font-family:楷体'>exit/fork/wait/getpid<span lang=AR-SA>等库函数最终都会调用</span>syscall<span
lang=AR-SA>函数，只是调用的参数不同而已，如果看最终的汇编代码会更清楚：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>……</span></p>
  <p class=MsoNormalIndent style='text-indent:18.0pt'><span style='font-size:
  9.0pt;font-family:楷体'>  34:    8b 55 d4               mov    -0x2c(%ebp),%edx</span></p>
  <p class=MsoNormalIndent style='text-indent:18.0pt'><span style='font-size:
  9.0pt;font-family:楷体'>  37:    8b 4d d8               mov    -0x28(%ebp),%ecx</span></p>
  <p class=MsoNormalIndent style='text-indent:18.0pt'><span style='font-size:
  9.0pt;font-family:楷体'>  3a:    8b 5d dc                mov   
  -0x24(%ebp),%ebx</span></p>
  <p class=MsoNormalIndent style='text-indent:18.0pt'><span style='font-size:
  9.0pt;font-family:楷体'>  3d:    8b 7d e0                mov   
  -0x20(%ebp),%edi</span></p>
  <p class=MsoNormalIndent style='text-indent:18.0pt'><span style='font-size:
  9.0pt;font-family:楷体'>  40:    8b 75 e4                mov   
  -0x1c(%ebp),%esi</span></p>
  <p class=MsoNormalIndent style='text-indent:18.0pt'><span style='font-size:
  9.0pt;font-family:楷体'>  43:    8b 45 08               mov    0x8(%ebp),%eax</span></p>
  <p class=MsoNormalIndent style='text-indent:18.0pt'><span style='font-size:
  9.0pt;font-family:楷体'>  46:    cd 80                   int    $0x80</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>      48: 89 45 f0                mov    %eax,-0x10(%ebp)</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>……</span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>可以看到其实是把系统调用号放到</span><span
style='font-family:楷体'>EAX<span lang=AR-SA>，其他</span>5<span lang=AR-SA>个参数</span>a[0]~a[4]<span
lang=AR-SA>分别保存到</span>EDX/ECX/EBX/EDI/ESI<span lang=AR-SA>五个寄存器中，及最多用</span>6<span
lang=AR-SA>个寄存器来传递系统调用的参数，且系统调用的返回结果是</span>EAX<span lang=AR-SA>。比如对于</span>getpid<span
lang=AR-SA>库函数而言，系统调用号（</span>SYS_getpid=18<span lang=AR-SA>）是保存在</span>EAX<span
lang=AR-SA>中，返回值（调用此库函数的的当前进程号</span>pid<span lang=AR-SA>）也在</span>EAX<span
lang=AR-SA>中。</span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:34.95pt;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0cm;text-autospace:none'><b><span>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=ZH-CN style='font-family:楷体'>与用户进程相关的系统调用</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在本实验中，与进程相关的各个系统调用属性如下所示：</span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>系统调用名</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>含义</span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border:solid windowtext 1.0pt;
  border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span lang=AR-SA style='font-size:9.0pt;font-family:楷体'>具体完成服务的函数</span></p>
  </td>
 </tr>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SYS_exit</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>process exit</span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>do_exit</span></p>
  </td>
 </tr>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SYS_fork</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>create child
  process, dup mm  </span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>do_fork--&gt;wakeup_proc</span></p>
  </td>
 </tr>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SYS_wait</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>wait child
  process</span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>do_wait</span></p>
  </td>
 </tr>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SYS_exec</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>after fork,
  process execute a new program</span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>load a
  program and refresh the mm</span></p>
  </td>
 </tr>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SYS_yield</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>process flag
  itself need resecheduling</span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>proc-&gt;need_sched=1,
  then scheduler will rescheule this process</span></p>
  </td>
 </tr>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SYS_kill</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>kill process</span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>do_kill--&gt;proc-&gt;flags
  |= PF_EXITING,                                                         
  --&gt;wakeup_proc--&gt;do_wait--&gt;do_exit</span></p>
  </td>
 </tr>
 <tr>
  <td width=62 valign=top style='width:62.1pt;border:solid windowtext 1.0pt;
  border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>SYS_getpid</span></p>
  </td>
  <td width=163 valign=top style='width:163.05pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>get the
  process's pid</span></p>
  </td>
  <td width=241 valign=top style='width:241.45pt;border-top:none;border-left:
  none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormal><span style='font-size:9.0pt;font-family:楷体'>&nbsp;</span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
10.5pt'><span style='font-size:10.5pt;font-family:楷体'> </span><span lang=AR-SA
style='font-family:楷体'>通过这些系统调用，可方便地完成从进程</span><span style='font-family:楷体'>/<span
lang=AR-SA>线程创建到退出的整个运行过程。</span></span></p>

<p class=MsoNormal style='margin-top:0cm;margin-right:34.95pt;margin-bottom:
0cm;margin-left:0cm;margin-bottom:.0001pt;text-align:justify;text-justify:inter-ideograph;
text-indent:0cm;text-autospace:none'><b><span>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span lang=ZH-CN style='font-family:楷体'>系统调用的执行过程</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>与用户态的函数库调用执行过程相比，系统调用执行过程的有四点主要的不同：</span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>不是通过</span><span
style='font-size:12.0pt;font-family:楷体'>“CALL”<span lang=ZH-CN>指令而是通过</span>“INT”<span
lang=ZH-CN>指令发起调用；</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>不是通过</span><span
style='font-size:12.0pt;font-family:楷体'>“RET”<span lang=ZH-CN>指令，而是通过</span>“IRET”<span
lang=ZH-CN>指令完成调用返回；</span></span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>当到达内核态后，操作系统需要严格检查系统调用传递的参数，确保不破坏整个系统的安全性；</span></p>

<p class=MsoNormalIndent style='margin-left:45.4pt;text-indent:-21.0pt'><span
style='font-size:12.0pt;font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-size:12.0pt;font-family:楷体'>执行系统调用可导致进程等待某事件发生，从而可引起进程切换；</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>下面我们以</span><span
style='font-family:楷体'>getpid<span lang=AR-SA>系统调用的执行过程大致看看操作系统是如何完成整个执行过程的。当用户进程调用</span>getpid<span
lang=AR-SA>函数，最终执行到</span>“INT T_SYSCALL”<span lang=AR-SA>指令后，</span>CPU<span
lang=AR-SA>根据操作系统建立的系统调用中断描述符，转入内核态，并跳转到</span>vector128<span lang=AR-SA>处（</span>kern/trap/vectors.S<span
lang=AR-SA>），开始了操作系统的系统调用执行过程，函数调用和返回操作的关系如下所示：</span></span></p>

<p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
font-family:楷体'>vector128(vectors.S)--&gt;
__alltraps(trapentry.S)--&gt;trap(trap.c)--&gt;trap_dispatch(trap.c)--</span></p>

<p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
font-family:楷体'>--&gt;syscall(syscall.c)--&gt;sys_getpid(syscall.c)--&gt;……--&gt;__trapret(trapentry.S)</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在执行</span><span
style='font-family:楷体'>trap<span lang=AR-SA>函数前，软件还需进一步保存执行系统调用前的执行现场，即把与用户进程继续执行所需的相关寄存器等当前内容保存到当前进程的中断帧</span>trapframe<span
lang=AR-SA>中（注意，在创建进程是，把进程的</span>trapframe<span lang=AR-SA>放在给进程的内核栈分配的空间的顶部）。软件做的工作在</span>vector128<span
lang=AR-SA>和</span>__alltraps<span lang=AR-SA>的起始部分：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>vectors.S::vector128<span lang=ZH-CN>起始处</span>:</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:8.0pt;
  font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>pushl</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>$0<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>pushl</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>$128</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>......</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>trapentry.S::__alltraps<span lang=ZH-CN>起始处</span>:</span></p>
  <p class=MsoNormalIndent style='text-indent:4.5pt'><span style='font-size:
  9.0pt;font-family:楷体'>pushl</span><span style='font-size:9.0pt;font-family:
  宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>%ds<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>pushl</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>%es<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>pushal</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:楷体'>……</span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>自此，用于保存用户态的用户进程执行现场的</span><span
style='font-family:楷体'>trapframe<span lang=AR-SA>的内容填写完毕，操作系统可开始完成具体的系统调用服务。在</span>sys_getpid<span
lang=AR-SA>函数中，简单地把当前进程的</span>pid<span lang=AR-SA>成员变量做为函数返回值就是一个具体的系统调用服务。完成服务后，操作系统按调用关系的路径原路返回到</span>__alltraps<span
lang=AR-SA>中。然后操作系统开始根据当前进程的中断帧内容做恢复执行现场操作。其实就是把</span>trapframe<span
lang=AR-SA>的一部分内容保存到寄存器内容。恢复寄存器内容结束后，调整内核堆栈指针到中断帧的</span>tf_eip<span
lang=AR-SA>处，这是内核栈的结构如下：</span></span></p>

<table class=MsoNormalTable border=1 cellspacing=0 cellpadding=0
 style='border-collapse:collapse;border:none'>
 <tr>
  <td width=487 valign=top style='width:487.0pt;border:solid windowtext 1.0pt;
  padding:0cm 5.4pt 0cm 5.4pt'>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-family:
  楷体'>/</span><span style='font-size:9.0pt;font-family:楷体'>*</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:
  9.0pt;font-family:楷体'>below</span><span style='font-size:9.0pt;font-family:
  宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>here</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:
  9.0pt;font-family:楷体'>defined</span><span style='font-size:9.0pt;font-family:
  宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>by</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:
  9.0pt;font-family:楷体'>x86</span><span style='font-size:9.0pt;font-family:
  宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>hardware</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:
  9.0pt;font-family:楷体'>*/</span></p>
  <p class=MsoNormalIndent style='text-indent:0cm'><span style='font-size:9.0pt;
  font-family:宋体'>&nbsp;&nbsp;&nbsp;</span><span style='font-size:9.0pt;
  font-family:楷体'> uintptr_t</span><span style='font-size:9.0pt;font-family:
  宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:楷体'>tf_eip;<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>uint16_t</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>tf_cs;<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>uint16_t</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>tf_padding3;<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>uint32_t</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>tf_eflags;<br>
  /*</span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>below</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>here</span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>only</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>when</span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>crossing</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>rings */<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>uintptr_t</span><span
  style='font-size:9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:
  9.0pt;font-family:楷体'>tf_esp;<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>uint16_t</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>tf_ss;<br>
  </span><span style='font-size:9.0pt;font-family:宋体'>&nbsp;&nbsp;&nbsp;&nbsp;</span><span
  style='font-size:9.0pt;font-family:楷体'>uint16_t</span><span style='font-size:
  9.0pt;font-family:宋体'>&nbsp;</span><span style='font-size:9.0pt;font-family:
  楷体'>tf_padding4;</span></p>
  </td>
 </tr>
</table>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
10.5pt'><span style='font-size:10.5pt;font-family:楷体'> </span><span lang=AR-SA
style='font-family:楷体'>这时执行</span><span style='font-family:楷体'>“IRET”<span
lang=AR-SA>指令后，</span>CPU<span lang=AR-SA>根据内核栈的情况回复到用户态，并把</span>EIP<span
lang=AR-SA>指向</span>tf_eip<span lang=AR-SA>的值，即</span>“INT T_SYSCALL”<span
lang=AR-SA>后的那条指令。这样整个系统调用就执行完毕了。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>至此，实验五中的主要工作描述完毕。</span></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:14.0pt;
font-family:楷体;letter-spacing:.05pt'>4  <span lang=ZH-CN>实验报告要求</span></span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从网站上下载</span><span
style='font-family:楷体'>lab5.zip<span lang=AR-SA>后，解压得到本文档和代码目录</span> lab5<span
lang=AR-SA>，完成实验中的各个练习。完成代码编写并检查无误后，在对应目录下执行</span> make handin <span
lang=AR-SA>任务，即会自动生成</span> lab5-handin.tar.gz<span lang=AR-SA>。最后请一定提前或按时提交到网络学堂上。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>注意有</span><span
style='font-family:楷体'>“LAB5”<span lang=AR-SA>的注释，代码中所有需要完成的地方（</span>challenge<span
lang=AR-SA>除外）都有</span>“LAB5”<span lang=AR-SA>和</span>“YOUR CODE”<span
lang=AR-SA>的注释，请在提交时特别注意保持注释，并将</span>“YOUR CODE”<span lang=AR-SA>替换为自己的学号，并且将所有标有对应注释的部分填上正确的代码。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span style='font-family:楷体'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><b><span lang=ZH-CN
style='font-size:14.0pt;font-family:楷体;letter-spacing:.05pt'>附录</span></b><b><span
style='font-size:14.0pt;font-family:楷体;letter-spacing:.05pt'>A<span lang=ZH-CN>：
【原理】用户进程的特征</span></span></b></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
lang=ZH-CN style='font-size:14.0pt;font-family:楷体'>从内核线程到用户进程</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在实验四中设计实现了进程控制块，并实现了内核线程的创建和简单的调度执行。但实验四中没有在用户态执行用户进程的管理机制，既无法体现用户进程的地址空间，以及用户进程间地址空间隔离的保护机制，不支持进程执行过程的用户态和核心态之间的切换，且没有用户进程的完整状态变化的生命周期。其实没有实现的原因是内核线程不需要这些功能。那内核线程相对于用户态线程有何特点呢？</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>但其实我们已经在实验四中看到了内核线程，内核线程的管理实现相对是简单的，其特点是直接使用操作系统（比如</span><span
style='font-family:楷体'>ucore<span lang=AR-SA>）在初始化中建立的内核虚拟内存地址空间，不同的内核线程之间可以通过调度器实现线程间的切换，达到分时使用</span>CPU<span
lang=AR-SA>的目的。由于内核虚拟内存空间是一一映射计算机系统的物理空间的，这使得可用空间的大小不会超过物理空间大小，所以操作系统程序员编写内核线程时，需要考虑到有限的地址空间，需要保证各个内核线程在执行过程中不会破坏操作系统的正常运行。这样在实现内核线程管理时，不必考虑涉及与进程相关的虚拟内存管理中的缺页处理、按需分页、写时复制、页换入换出等功能。如果在内核线程执行过程中出现了访存错误异常或内存不够的情况，就认为操作系统出现错误了，操作系统将直接宕机。在</span>ucore<span
lang=AR-SA>中，就是调用</span>panic<span lang=AR-SA>函数，进入内核调试监控器</span>kernel_debug_monitor<span
lang=AR-SA>。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>内核线程管理思想相对简单，但编写内核线程对程序员的要求很高。从理论上讲（理想情况），如果程序员都是能够编写操作系统级别的</span><span
style='font-family:楷体'>“<span lang=AR-SA>高手</span>”<span lang=AR-SA>，能够勤俭和高效地使用计算机系统中的资源，且这些</span>“<span
lang=AR-SA>高手</span>”<span lang=AR-SA>都为他人着想，具有奉献精神，在别的应用需要计算机资源的时候，能够从大局出发，从整个系统的执行效率出发，让出自己占用的资源，那这些</span>“<span
lang=AR-SA>高手</span>”<span lang=AR-SA>编写出来的程序直接作为内核线程运行即可，也就没有用户进程存在的必要了。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>但现实与理论的差距是巨大的，能编写操作系统的程序员是极少数的，与当前的应用程序员相比，估计大约差了</span><span
style='font-family:楷体'>3~4<span lang=AR-SA>个数量级。如果还要求编写操作系统的程序员考虑其他未知程序员的未知需求，那这样的程序员估计可以成为是编程界的</span>“<span
lang=AR-SA>上帝</span>”<span lang=AR-SA>了。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从应用程序编写和运行的角度看，既然程序员都不是</span><span
style='font-family:楷体'>“<span lang=AR-SA>上帝</span>”<span lang=AR-SA>，操作系统程序员就需要给应用程序员编写的程序提供一个既</span>“<span
lang=AR-SA>宽松</span>”<span lang=AR-SA>又</span>“<span lang=AR-SA>严格</span>”<span
lang=AR-SA>的执行环境，让对内存大小和</span>CPU<span lang=AR-SA>使用时间等资源的限制没有仔细考虑的应用程序都能在操作系统中正常运行，且即使程序太可靠，也只能破坏自己，而不能破坏其他运行程序和整个系统。</span>“<span
lang=AR-SA>严格</span>”<span lang=AR-SA>就是安全性保证，即应用程序执行不会破坏在内存中存在的其他应用程序和操作系统的内存空间等独占的资源；</span>“<span
lang=AR-SA>宽松</span>”<span lang=AR-SA>就算是方便性支持，即提供给应用程序尽量丰富的服务功能和一个远大于物理内存空间的虚拟地址空间，使得应用程序在执行过程中不必考虑很多繁琐的细节（比如如何初始化</span>PCI<span
lang=AR-SA>总线和外设等，如果管理物理内存等）。</span></span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
lang=ZH-CN style='font-size:14.0pt;font-family:楷体'>让用户进程正常运行的用户环境</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在操作系统原理的介绍中，一般提到进程的概念其实主要是指用户进程。从操作系统的设计和实现的角度看，其实用户进程是指一个应用程序在操作系统提供的一个用户环境中的一次执行过程。这里的重点是用户环境。用户环境有啥功能？用户环境指的是什么？
</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从功能上看，操作系统提供的这个用户环境有两方面的特点。一方面与存储空间相关，即限制用户进程可以访问的物理地址空间，且让各个用户进程之间的物理内存空间访问不重叠，这样可以保证不同用户进程之间不能相互破坏各自的内存空间，利用虚拟内存的功能（页换入换出）。给用户进程提供了远大于实际物理内存空间的虚拟内存空间。</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>另一方面与执行指令相关，即限制用户进程可执行的指令，不能让用户进程执行特权指令（比如修改页表起始地址），从而保证用户进程无法破坏系统。但如果不能执行特权指令，则很多功能（比如访问磁盘等）无法实现，所以需要提供某种机制，让操作系统完成需要特权指令才能做的各种服务功能，给用户进程一个</span><span
style='font-family:楷体'>“<span lang=AR-SA>服务窗口</span>”,<span lang=AR-SA>用户进程可以通过这个</span>“<span
lang=AR-SA>窗口</span>”<span lang=AR-SA>向操作系统提出服务请求，由操作系统来帮助用户进程完成需要特权指令才能做的各种服务。另外，还要有一个</span>“<span
lang=AR-SA>中断窗口</span>”<span lang=AR-SA>，让用户进程不主动放弃使用</span>CPU<span
lang=AR-SA>时，操作系统能够通过这个</span>“<span lang=AR-SA>中断窗口</span>”<span lang=AR-SA>强制让用户进程放弃使用</span>CPU<span
lang=AR-SA>，从而让其他用户进程有机会执行。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>基于功能分析，我们就可以把这个用户环境定义为如下组成部分：</span></p>

<p class=3 style='margin-left:46.5pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-family:楷体'>建立用户虚拟空间的页表和支持页换入换出机制的用户内存访存错误异常服务例程：提供地址隔离和超过物理空间大小的虚存空间。</span></p>

<p class=3 style='margin-left:46.5pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-family:楷体'>应用程序执行的用户态</span><span
style='font-family:楷体'>CPU<span lang=ZH-CN>特权级：在用户态</span>CPU<span lang=ZH-CN>特权级，应用程序只能执行一般指令，如果特权指令，结果不是无效就是产生</span>“<span
lang=ZH-CN>执行非法指令</span>”<span lang=ZH-CN>异常；</span></span></p>

<p class=3 style='margin-left:46.5pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-family:楷体'>系统调用机制：给用户进程提供</span><span
style='font-family:楷体'>“<span lang=ZH-CN>服务窗口</span>”<span lang=ZH-CN>；</span></span></p>

<p class=3 style='margin-left:46.5pt;text-indent:-21.0pt'><span
style='font-family:Wingdings'>l<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span lang=ZH-CN style='font-family:楷体'>中断响应机制：给用户进程设置</span><span
style='font-family:楷体'>“<span lang=ZH-CN>中断窗口</span>”<span lang=ZH-CN>，这样产生中断后，当前执行的用户进程将被强制打断，</span>CPU<span
lang=ZH-CN>控制权将被操作系统的中断服务例程使用。</span></span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
lang=ZH-CN style='font-size:14.0pt;font-family:楷体'>用户态进程的执行过程分析</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>在这个环境下运行的进程就是用户进程。那如果用户进程由于某种原因下面进入内核态后，那在内核态执行的是什么呢？还是用户进程吗？首先分析一下用户进程这样会进入内核态呢？回顾一下</span><span
style='font-family:楷体'>lab1<span lang=AR-SA>，就可以知道当产生外设中断、</span>CPU<span
lang=AR-SA>执行异常（比如访存错误）、陷入（系统调用），用户进程就会切换到内核中的操作系统中来。表面上看，到内核态后，操作系统取得了</span>CPU<span
lang=AR-SA>控制权，所以现在执行的应该是操作系统代码，由于此时</span>CPU<span lang=AR-SA>处于核心态特权级，所以操作系统的执行过程就就应该是内核进程了。这样理解忽略了操作系统的具体实现。如果考虑操作系统的具体实现，应该如果来理解进程呢？</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从进程控制块的角度看，如果执行了进程执行现场（上下文）的切换，就认为到另外一个进程执行了，及进程的分界点设定在执行进程切换的前后。到底切换了什么呢？其实只是切换了进程的页表和相关硬件寄存器，这些信息都保存在进程控制块中的相关域中。所以，我们可以把执行应用程序的代码一直到执行操作系统中的进程切换处为止都认为是一个应用程序的执行过程（其中有操作系统的部分代码执行过过程）即进程。因为在这个过程中，没有更换到另外一个进程控制块的进程的页表和相关硬件寄存器。</span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>从指令执行的角度看，如果再仔细分析一下操作系统这个软件的特点并细化一下进入内核原因，就可以看出进一步进行划分。操作系统的主要功能是给上层应用提供服务，管理整个计算机系统中的资源。所以操作系统虽然是一个软件，但其实是一个基于事件的软件，这里操作系统需要响应的事件包括三类：外设中断、</span><span
style='font-family:楷体'>CPU<span lang=AR-SA>执行异常（比如访存错误）、陷入（系统调用）。如果用户进程通过系统调用要求操作系统提供服务，那么用户进程的角度看，操作系统就是一个特殊的软件库（比如相对于用户态的</span>libc<span
lang=AR-SA>库，操作系统可看作是内核态的</span>libc<span lang=AR-SA>库），完成用户进程的需求，从执行逻辑上看，是用户进程</span>“<span
lang=AR-SA>主观</span>”<span lang=AR-SA>执行的一部分，即用户进程</span>“<span lang=AR-SA>知道</span>”<span
lang=AR-SA>操作系统要做的事情。那么在这种情况下，进程的代码空间包括用户态的执行程序和内核态响应用户进程通过系统调用而在核心特权态执行服务请求的操作系统代码，为此这种情况下的进程的内存虚拟空间也包括两部分：用户态的虚地址空间和核心态的虚地址空间。但如果此时发生的事件是外设中断和</span>CPU<span
lang=AR-SA>执行异常，虽然</span>CPU<span lang=AR-SA>控制权也转入到操作系统中的中断服务例程，但这些内核执行代码执行过程是用户进程</span>“<span
lang=AR-SA>不知道</span>”<span lang=AR-SA>的，是另外一段执行逻辑。那么在这种情况下，实际上是执行了两段目标不同的执行程序，一个是代表应用程序的用户进程，一个是代表中断服务例程处理外设中断和</span>CPU<span
lang=AR-SA>执行异常的内核线程。这个用户进程和内核线程在产生中断或异常的时候，</span>CPU<span lang=AR-SA>硬件就完成了它们之间的指令流切换。</span></span></p>

<p class=MsoNormal style='margin-left:6.5pt;text-autospace:none'><b><span
lang=ZH-CN style='font-size:14.0pt;font-family:楷体'>用户进程的运行状态分析</span></b></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
10.5pt'><span style='font-size:10.5pt;font-family:楷体'>   </span><span
lang=AR-SA style='font-family:楷体'>用户进程在其执行过程中会存在很多种不同的执行状态，根据操作系统原理，一个用户进程一般的运行状态有五种：创建（</span><span
style='font-family:楷体'>new<span lang=AR-SA>）态、就绪（</span>ready<span lang=AR-SA>）态、运行（</span>running<span
lang=AR-SA>）态、等待（</span>blocked<span lang=AR-SA>）态、退出（</span>exit<span
lang=AR-SA>）态。各个状态之间会由于发生了某事件而进行状态转换。</span></span></p>

<p class=1 style='text-align:justify;text-justify:inter-ideograph;text-indent:
12.0pt'><span lang=AR-SA style='font-family:楷体'>但在用户进程的执行过程中，具体在哪个时间段处于上述状态的呢？上述状态是如何转变的呢？首先，我们看创建（</span><span
style='font-family:楷体'>new<span lang=AR-SA>）态，操作系统完成进程的创建工作，而体现进程存在的就是进程控制块，所以一旦操作系统创建了进程控制块，则可以认为此时进程就已经存在了，但由于进程能够运行的各种资源还没准备好，所以此时的进程处于创建（</span>new<span
lang=AR-SA>）态。创建了进程控制块后，进程并不能就执行了，还需准备好各种资源，如果把进程执行所需要的虚拟内存空间，执行代码，要处理的数据等都准备好了，则此时进程已经可以执行了，但还没有被操作系统调度，需要等待操作系统选择这个进程执行，于是把这个做好</span>“<span
lang=AR-SA>执行准备</span>”<span lang=AR-SA>的进程放入到一个队列中，并可以认为此时进程处于就绪（</span>ready<span
lang=AR-SA>）态。当操作系统的调度器从就绪进程队列中选择了一个就绪进程后，通过执行进程切换，就让这个被选上的就绪进程执行了，此时进程就处于运行（</span>running<span
lang=AR-SA>）态了。到了运行态后，会出现三种事件。如果进程需要等待某个事件（比如主动睡眠</span>10<span lang=AR-SA>秒钟，或进程访问某个内存空间，但此内存空间被换出到硬盘</span>swap<span
lang=AR-SA>分区中了，进程不得不等待操作系统把缓慢的硬盘上的数据重新读回到内存中），那么操作系统会把</span>CPU<span
lang=AR-SA>给其他进程执行，并把进程状态从运行（</span>running<span lang=AR-SA>）态转换为等待（</span>blocked<span
lang=AR-SA>）态。如果用户进程的应用程序逻辑流程执行结束了，那么操作系统会把</span>CPU<span lang=AR-SA>给其他进程执行，并把进程状态从运行（</span>running<span
lang=AR-SA>）态转换为退出（</span>exit<span lang=AR-SA>）态，并准备回收用户进程占用的各种资源，当把表示整个进程存在的进程控制块也回收了，这进程就不存在了。在这整个回收过程中，进程都处于退出（</span>exit<span
lang=AR-SA>）态。</span>2<span lang=AR-SA>考虑到在内存中存在多个处于就绪态的用户进程，但只有一个</span>CPU<span
lang=AR-SA>，所以为了公平起见，每个就绪态进程都只有有限的时间片段，当一个运行态的进程用完了它的时间片段后，操作系统会剥夺此进程的</span>CPU<span
lang=AR-SA>使用权，并把此进程状态从运行（</span>running<span lang=AR-SA>）态转换为就绪（</span>ready<span
lang=AR-SA>）态，最后把</span>CPU<span lang=AR-SA>给其他进程执行。如果某个处于等待（</span>blocked<span
lang=AR-SA>）态的进程所等待的事件产生了（比如睡眠时间到，或需要访问的数据已经从硬盘换入到内存中），则操作系统会通过把等待此事件的进程状态从等待（</span>blocked<span
lang=AR-SA>）态转到就绪（</span>ready<span lang=AR-SA>）态。这样进程的整个状态转换形成了一个有限状态自动机。</span></span></p>

</div>

</body>

</html>
